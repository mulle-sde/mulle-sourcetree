#! /usr/bin/env bash
#
#   Copyright (c) 2015-2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
if [ "${TRACE}" = "YES" ]
then
   set -x
fi


MULLE_EXECUTABLE_VERSION_MAJOR=0
MULLE_EXECUTABLE_VERSION_MINOR=1
MULLE_EXECUTABLE_VERSION_PATCH=0

MULLE_EXECUTABLE_VERSION="${MULLE_EXECUTABLE_VERSION_MAJOR}.${MULLE_EXECUTABLE_VERSION_MINOR}.${MULLE_EXECUTABLE_VERSION_PATCH}"



trap_fail()
{
   exit 1
}



usage()
{
   local verbose="${1:-NO}"

   cat <<EOF
Usage:
   ${MULLE_EXECUTABLE_NAME} [flags]

   Convert a mulle-bootstrap enabled to a sourcetree project.
   This will work on files for ${UNAME} only.

Flags:
EOF

   options_technical_flags_usage

   cat <<EOF

   if [ "${verbose}" = "NO" ]
   then
      cat <<EOF
      (use mulle-sourcetree -v help to show more flags)
EOF
   exit 1
}


#
# stolen from:
# http://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac
# ----
#
_prepend_path_if_relative()
{
   case "$2" in
      /*)
         echo "$2"
      ;;
      *)
         echo "$1/$2"
      ;;
   esac
}


resolve_symlinks()
{
   local dir_context
   local linkpath

   if linkpath="`readlink "$1"`"
   then
      dir_context=`dirname -- "$1"`
      resolve_symlinks "`_prepend_path_if_relative "${dir_context}" "${linkpath}"`"
   else
      echo "$1"
   fi
}


sourcetree_libexec_path()
{
   local executablepath="$1"

   local exedir
   local exedirpath
   local prefix
   local libexecpath

   case "${executablepath}" in
      \.*|/*|~*)
      ;;

      *)
         executablepath="`command -v "${executablepath}"`"
      ;;
   esac

   executablepath="`resolve_symlinks "${executablepath}"`"
   exedirpath="`dirname "${executablepath}"`"
   prefix="`dirname "${exedirpath}"`"
   libexecpath="${prefix}/libexec/mulle-sourcetree"

   if [ ! -x "${libexecpath}/mulle-sourcetree-config.sh" ]
   then
      libexecpath="${exedirpath}/src"
   fi

   case "$libexecpath" in
      /*|~*)
      ;;

      *)
         libexecpath="$PWD/$libexecpath"
      ;;
   esac

   if [ -x "${libexecpath}/mulle-sourcetree-config.sh" ]
   then
      echo "${libexecpath}"
   fi
}


#
# Read the CVS from the .repositories file
#
# This function sets values of variables that should be declared
# in the caller!
#
#   # parse_raw_clone
#   local _url        # _url of clone
#   local _dstdir
#   local _branch
#   local _scm
#   local _tag
#
parse_raw_clone()
{
   local clone="$1"
   local expanded

   [ -z "${clone}" ] && internal_fail "parse_raw_clone: clone is empty"

   IFS=";" read -r _url _dstdir _branch _scm _tag <<< "${clone}"
}



# this sets values to variables that should be declared
# in the caller!
#
# this sets values to variables that should be declared
# in the caller!
#
#   # parse_clone
#   local _name
#   local _url
#   local _branch
#   local _scm
#   local _tag
#   local _stashdir
#
# expansion is now done during .auto creation
# clone="`expanded_variables "${1}"`"
#
parse_clone()
{
   local clone="$1"

   parse_raw_clone "${clone}"

   if [ "$MULLE_FLAG_LOG_SETTINGS" = "YES" ]
   then
      log_trace2 "URL:      \"${_url}\""
      log_trace2 "SCM:      \"${_scm}\""
      log_trace2 "BRANCH:   \"${_branch}\""
      log_trace2 "TAG:      \"${_tag}\""
      log_trace2 "DSTDIR:   \"${_dstdir}\""
   fi
}


#
# most stuff passed in via global
#
emit_commandline()
{
   local marks="$1"

   if ! [ -z "${marks}" ]
   then
      log_info "Add embedded ${C_MAGENTA}${C_BOLD}${_url}${C_INFO} for \
${C_RESET_BOLD}${_dstdir}${C_INFO}"
   else
      log_info "Add repository ${C_MAGENTA}${C_BOLD}${_url}"
   fi

   local flags

   flags=""
   if [ ! -z "${marks}" ]
   then
      flags="`concat "${flags}" "--marks '${marks}'" `"
   fi
   if [ ! -z "${_scm}" ]
   then
      flags="`concat "${flags}" "--nodetype '${_scm}'" `"
   fi
   if [ ! -z "${_branch}" ]
   then
      flags="`concat "${flags}" "--branch '${_branch}'" `"
   fi
   if [ ! -z "${_tag}" ]
   then
      flags="`concat "${flags}" "--tag '${_tag}'" `"
   fi
   if [ ! -z "${_url}" ]
   then
      flags="`concat "${flags}" "--url '${_url}'" `"
   fi
   exekutor echo "mulle-sourcetree add ${flags} '${_dstdir}'"
}


copy_repositories()
{
   local filename="$1"
   local marks="$2"

   local _url
   local _branch
   local _scm
   local _tag
   local _dstdir

   ROOT_DIR="${PWD}"

   log_info "Copy ${C_RESET_BOLD}${filename}${C_INFO} contents"

   local clone

   IFS="
"
   for clone in `grep -v '^#' "${filename}"`
   do
      IFS="${DEFAULT_IFS}"
      if [ -z "${clone}" ]
      then
         continue
      fi

      parse_clone "${clone}"

      local evaledurl

      evaledurl="`eval echo "${_url}"`"
      [ -z "${evaledurl}" ] && fail "URL \"${_url}\" evaluates to empty"

      if [ -z "${_scm}" ]
      then
         _scm="`exekutor ${MULLE_FETCH:-mulle-fetch} typeguess "${evaledurl}"`"
      fi
      _scm="${_scm:-git}"

      # mark empty = normal
      if [ -z "${_dstdir}" ]
      then
         _dstdir="`exekutor ${MULLE_FETCH:-mulle-fetch} guess -s "${_scm}" "${evaledurl}"`"
         if [ -z "${marks}" ]
         then
            _dstdir="subproject/${_dstdir}"
         fi
      fi

      emit_commandline "${marks}"
   done
   IFS="${DEFAULT_IFS}"
}


convert_bootstrap()
{
   local directory="$1"

   if [ ! -d .bootstrap -a ! -d .bootstrap.local ]
   then
      log_warning "No .bootstrap folders found ($PWD)"
      exit 0
   fi

   if [ -f ".bootstrap.local/is_master" ]
   then
      log_warning "This is a master bootstrap project.
The master can not be converted. Convert the minions! ($PWD)"
      exit 0
   fi

   local found

   found="NO"
   #
   # copy embedded repositories
   #
   if [ -f ".bootstrap.local/embedded_repositories" ]
   then
      copy_repositories ".bootstrap.local/embedded_repositories" "nobuild,noshare"
      found="YES"
   else
      if [ -f ".bootstrap/embedded_repositories" ]
      then
         copy_repositories ".bootstrap/embedded_repositories" "nobuild,noshare"
         found="YES"
      fi
   fi

   #
   # copy repositories
   #
   if [ -f ".bootstrap.local/repositories" ]
   then
      copy_repositories ".bootstrap.local/repositories"
      found="YES"
   else
      if [ -f ".bootstrap/repositories" ]
      then
         copy_repositories ".bootstrap/repositories"
         found="YES"
      fi
   fi

   if [ "${found}" = "NO" ]
   then
      log_warning "There are no repositories here. Maybe it's a master"
   fi
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE="NONE"
   local MULLE_FLAG_IGNORE_GRAVEYARD="NO"

   # technical flags
   local MULLE_FLAG_EXEKUTOR_DRY_RUN="NO"
   local MULLE_FLAG_LOG_LOCAL="NO"
   local MULLE_FLAG_LOG_DEBUG="NO"
   local MULLE_FLAG_LOG_EXEKUTOR="NO"
   local MULLE_FLAG_LOG_FLUFF="NO"
   local MULLE_FLAG_LOG_SCRIPTS="NO"
   local MULLE_FLAG_LOG_SETTINGS="NO"
   local MULLE_FLAG_LOG_VERBOSE="NO"
   local MULLE_FLAG_LOG_MERGE="NO"
   local MULLE_TRACE_POSTPONE="NO"

   local SOURCETREE_CONFIG_FILE=".mulle-sourcetree/config"
   local SOURCETREE_DB_NAME=".mulle-sourcetree/db"
   local MULLE_SOURCETREE_SHARE_DIR="stashes"

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE="BOTH"
         ;;

         -h|--help)
            usage "${MULLE_TRACE}"
         ;;

         --version)
            echo "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -*)
            log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown option \"$1\""
            usage "${MULLE_TRACE}"
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   local directory

   directory="${PWD}"
   if [ $# -eq 1 ]
   then
      directory="$1"
      shift
   else
      [ $# -eq 0 ] || usage
   fi


   ( cd "${directory}" &&  convert_bootstrap )
}



_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      echo "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   MULLE_SOURCETREE_LIBEXEC_DIR="`sourcetree_libexec_path "$0"`"
   if [ -z "${MULLE_SOURCETREE_LIBEXEC_DIR}" ]
   then
      echo "Fatal Error: Could not find libexec for ${MULLE_EXECUTABLE} ($PWD)" >&2
      exit 1
   fi

   #
   # minimal setup exit
   #
   if [ "$1" = "library-path" ]
   then
      echo "${MULLE_SOURCETREE_LIBEXEC_DIR}"
      exit 0
   fi

   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env library-path 2> /dev/null`"
   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      if [ -z "`command -v "${executablepath}"`" ]
      then
          echo "Fatal Error: Could not find mulle-bashfunctions-env in PATH (not installed ?)" >&2
      else
         echo "Fatal Error: Could not find libexec of mulle-bashfunctions-env ($PWD)" >&2
      fi
      exit 1
   fi

   #
   # to make these includes faster don't search via PATH
   # but have PATH as fallback
   #
   local failmsg

   failmsg="failed to load bashfunctions from ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"

      # shellcheck source=../mulle-bashfunctions/src/mulle-string.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-string.sh"   || fail "${failmsg}"
      # shellcheck source=../mulle-bashfunctions/src/mulle-logging.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-logging.sh"  || fail "${failmsg}"
      # shellcheck source=../mulle-bashfunctions/src/mulle-exekutor.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-exekutor.sh" || fail "${failmsg}"
      # shellcheck source=../mulle-bashfunctions/src/mulle-options.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-options.sh"  || fail "${failmsg}"
      # shellcheck source=../mulle-bashfunctions/src/mulle-path.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh"     || fail "${failmsg}"
      # shellcheck source=../mulle-bashfunctions/src/mulle-file.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-file.sh"     || fail "${failmsg}"


   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   trap trap_fail INT
   set -o pipefail

   MULLE_ARGUMENTS="$*"
}

_init "$@" # needs params
main "$@"
