#! /usr/bin/env bash
#
#   Copyright (c) 2015-2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
if [ "${TRACE}" = "YES" ]
then
   set -x
fi


MULLE_EXECUTABLE_VERSION_MAJOR=0
MULLE_EXECUTABLE_VERSION_MINOR=0
MULLE_EXECUTABLE_VERSION_PATCH=0

MULLE_EXECUTABLE_VERSION="${MULLE_EXECUTABLE_VERSION_MAJOR}.${MULLE_EXECUTABLE_VERSION_MINOR}.${MULLE_EXECUTABLE_VERSION_PATCH}"


#
# This is the main user interface to mulle-sourcetree
# sorta like git
#

trap_fail()
{
   exit 1
}


SHOWN_COMMANDS="\
   add           : add a node to the configuration
   buildorder    : emit nodes that are buildable in proper dependency order
   clean         : remove files added by an update
   info          : print current sourcetree information
   print         : list nodes recursively in the configuration
   set           : set a node's properties in the configuration
   status        : query state of the tree
   update        : update the project tree [default]"

HIDDEN_COMMANDS="\
   dotdump       : create a picture of the tree or the database
   fix           : support to track user modifications in the filesystem
   get           : get a node's properties from the configuration
   library-path  : print path to ${MULLE_EXECUTABLE_NAME} libexec
   path          : print path to project
   list          : list nodes in the current configuration
   mark          : add or remove a mark from a node in the configuration
   walk          : visit all the tree nodes with a callback
   remove        : remove a node from the configuration
   reset         : clear the database, to force an update
   uname         : ${MULLE_EXECUTABLE_NAME}'s simplified uname(1)
   version       : print ${MULLE_EXECUTABLE_NAME} version"


print_commands()
{
   local  show_all="${1:-NO}"

   echo "${SHOWN_COMMANDS}"

   if [ "${UNAME}" = 'darwin' ]
   then
      echo "${DARWIN_COMMANDS}"
   fi

   if [ "${show_all}" != "NO" ]
   then
      echo "${HIDDEN_COMMANDS}"
   fi
}


usage()
{
   local verbose="${1:-NO}"

   cat <<EOF
Usage:
   ${MULLE_EXECUTABLE_NAME} [flags] [command] [options]

   Maintain a project sourcetree composed of multiple repositories
   and archives.

Flags:
   -e        : bypass mulle-sde check
   -N        : bypass search for enclosing source tree
   --flat    : flat operation
   --recurse : recursive operation
   --share   : share operation
EOF
   options_technical_flags_usage

   cat <<EOF

Commands:
EOF

   print_commands "${verbose}" | sort

   if [ "${verbose}" = "NO" ]
   then
      cat <<EOF
      (use mulle-sourcetree -v help to show more commands)
EOF
   fi

   cat <<EOF
Options are command specific. Use mulle-sourcetree <command> -h for help.
EOF

   exit 1
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE="NONE"
   local MULLE_FLAG_IGNORE_GRAVEYARD="NO"

   # technical flags
   local MULLE_FLAG_EXEKUTOR_DRY_RUN="NO"
   local MULLE_FLAG_LOG_LOCAL="NO"
   local MULLE_FLAG_LOG_DEBUG="NO"
   local MULLE_FLAG_LOG_EXEKUTOR="NO"
   local MULLE_FLAG_LOG_FLUFF="NO"
   local MULLE_FLAG_LOG_SCRIPTS="NO"
   local MULLE_FLAG_LOG_SETTINGS="NO"
   local MULLE_FLAG_LOG_VERBOSE="NO"
   local MULLE_FLAG_LOG_MERGE="NO"
   local MULLE_TRACE_POSTPONE="NO"
   local MULLE_FLAG_DEFER="ROOT"
   local FLAG_OUTSIDE_ENV="NO"

   local FLAG_SOURCETREE_MODE=

   local SOURCETREE_CONFIG_FILE=".mulle-sourcetree"
   local SOURCETREE_DEFAULT_FILE=".mulle-sourcetree.default"
   local SOURCETREE_DB_DIR=".mulle-sourcetree.db"
   local SOURCETREE_FIX_FILE=".mulle-sourcetree.fix"

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -e)
            FLAG_OUTSIDE_ENV="YES"
         ;;

         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE="BOTH"
         ;;

         -h|--help)
            usage "${MULLE_TRACE}"
         ;;

         --git-terminal-prompt)
            [ $# -eq 1 ] && fail "missing argument to \"$1\""
            shift

            GIT_TERMINAL_PROMPT="$1"
            export GIT_TERMINAL_PROMPT
         ;;

         --database-dir)
            [ $# -eq 1 ] && fail "missing argument to \"$1\""
            shift

            SOURCETREE_DB_DIR="$1"
         ;;

         --config|--config-file)
            [ $# -eq 1 ] && fail "missing argument to \"$1\""
            shift

            SOURCETREE_CONFIG_FILE="$1"
         ;;

         -D|--defer|--defer-root)
            MULLE_FLAG_DEFER="ROOT";
         ;;

         -r|--recurse|--recursive)
            FLAG_SOURCETREE_MODE="recurse"
         ;;

         --flat)
            FLAG_SOURCETREE_MODE="flat"
         ;;

         --share)
            FLAG_SOURCETREE_MODE="share"
         ;;

         --defer-parent)
            MULLE_FLAG_DEFER="PARENT";
         ;;

         -N|--no-defer)
            MULLE_FLAG_DEFER="NONE";
         ;;

         --version)
            echo "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -*)
            log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown flag \"$1\""
            usage "${MULLE_TRACE}"
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   if [ "${FLAG_OUTSIDE_ENV}" = "NO" -a -z "${MULLE_SDE_VIRTUAL_ROOT}" ]
   then
      fail "To run mulle-sourcetree outside of mulle-sde, pass the -e flag"
   fi

   local cmd

   cmd="${1:-update}"

   MULLE_EXECUTABLE_FAIL_PREFIX="${MULLE_EXECUTABLE_NAME} ${cmd}"
   [ $# -eq 0 ] || shift

   if [ -z "${MULLE_FETCH}" ]
   then
      MULLE_FETCH="mulle-fetch"
   fi

   # shellcheck source=../mulle-bashfunctions/src/mulle-options.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh"  || fail "${failmsg}"

   # shellcheck source=mulle-sourcetree-db.sh
   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-db.sh" || exit 1
   # shellcheck source=mulle-sourcetree-node.sh
   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-node.sh" || exit 1
   # shellcheck source=mulle-sourcetree-nodeline.sh
   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-nodeline.sh" || exit 1
   # shellcheck source=mulle-sourcetree-cfg.sh
   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-cfg.sh" || exit 1


   cfg_defer_if_needed "ROOT" || exit 1

   local SOURCETREE_MODE

   _db_set_default_mode "/" "${FLAG_SOURCETREE_MODE}" || exit 1

   #
   #
   #
   case "${cmd}" in
      add)
         # shellcheck source=src/mulle-sourcetree-config.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-config.sh"

         sourcetree_add_main "$@"
      ;;

      buildorder)
         # shellcheck source=src/mulle-sourcetree-walk.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-walk.sh"

         sourcetree_buildorder_main "$@"
      ;;

      clean)
         # shellcheck source=src/mulle-sourcetree-db.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-zombie.sh"

         zombie_clean_main "$@"
      ;;

      dotdump)
         # shellcheck source=src/mulle-sourcetree-dotdump.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-dotdump.sh"

         sourcetree_dotdump_main "$@"
      ;;

      fix)
         # shellcheck source=src/mulle-sourcetree-fix.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-fix.sh"

         sourcetree_fix_main "$@"
      ;;

      get)
         # shellcheck source=src/mulle-sourcetree-config.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-config.sh"

         sourcetree_get_main "$@"
      ;;

      help)
         usage "${MULLE_TRACE}"
      ;;

      info)
         # shellcheck source=src/mulle-sourcetree-config.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-config.sh"

         sourcetree_info_main "$@"
      ;;

      library-path)
         echo "${MULLE_SOURCETREE_LIBEXEC_DIR}"
      ;;

      list)
         # shellcheck source=src/mulle-sourcetree-config.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-config.sh"

         sourcetree_list_main "$@"
      ;;

      mark)
         # shellcheck source=src/mulle-sourcetree-config.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-config.sh"

         sourcetree_mark_main "$@"
      ;;

      path)
         # shellcheck source=src/mulle-sourcetree-walk.sh
         echo "$PWD"
      ;;

      print)
         # shellcheck source=src/mulle-sourcetree-walk.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-walk.sh"

         # promote flat to recurse, except when user says so
         if [ "${SOURCETREE_MODE}" = "flat" -a -z "${FLAG_SOURCETREE_MODE}" ]
         then
            SOURCETREE_MODE="recurse"
         fi

         sourcetree_walk_main --no-depth-first --callback-root --cd \
               "${MULLE_EXECUTABLE}" --flat -N list --output-banner --output-eval
      ;;

      remove)
         # shellcheck source=src/mulle-sourcetree-config.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-config.sh"

         sourcetree_remove_main "$@"
      ;;

      reset)
         # shellcheck source=src/mulle-sourcetree-reset.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-reset.sh"

         sourcetree_reset_main "$@"
      ;;

      set)
         # shellcheck source=src/mulle-sourcetree-config.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-config.sh"

         sourcetree_set_main "$@"
      ;;

      status)
         # shellcheck source=src/mulle-sourcetree-status.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-status.sh"

         sourcetree_status_main "$@"
      ;;

      uname)
         echo "${UNAME}"
      ;;

      update)
         # shellcheck source=src/mulle-sourcetree-update.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-update.sh"

         sourcetree_update_main "$@"
      ;;

      walk)
         # shellcheck source=src/mulle-sourcetree-walk.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-walk.sh"

         sourcetree_walk_main "$@"
      ;;

      version)
         echo "${MULLE_EXECUTABLE_VERSION}"
         return 0
      ;;

      *)
         log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown command \"${cmd}\""
         usage "${MULLE_TRACE}"
      ;;
   esac
}

########
###
### INIT
###

#
# stolen from:
# http://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac
# ----
#
_prepend_path_if_relative()
{
   case "$2" in
      /*)
         echo "$2"
      ;;
      *)
         echo "$1/$2"
      ;;
   esac
}


resolve_symlinks()
{
   local dir_context
   local linkpath

   if linkpath="`readlink "$1"`"
   then
      dir_context=`dirname -- "$1"`
      resolve_symlinks "`_prepend_path_if_relative "${dir_context}" "${linkpath}"`"
   else
      echo "$1"
   fi
}


sourcetree_libexec_path()
{
   local executablepath="$1"

   local exedir
   local exedirpath
   local prefix
   local libexecpath

   case "${executablepath}" in
      \.*|/*|~*)
      ;;

      *)
         executablepath="`command -v "${executablepath}"`"
      ;;
   esac

   executablepath="`resolve_symlinks "${executablepath}"`"
   exedirpath="`dirname "${executablepath}"`"
   prefix="`dirname "${exedirpath}"`"
   libexecpath="${prefix}/libexec/mulle-sourcetree"

   if [ ! -x "${libexecpath}/mulle-sourcetree-config.sh" ]
   then
      libexecpath="${exedirpath}/src"
   fi

   case "$libexecpath" in
      /*|~*)
      ;;

      *)
         libexecpath="$PWD/$libexecpath"
      ;;
   esac

   if [ -x "${libexecpath}/mulle-sourcetree-config.sh" ]
   then
      echo "${libexecpath}"
   fi
}


_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      echo "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   MULLE_SOURCETREE_LIBEXEC_DIR="`sourcetree_libexec_path "$0"`"
   if [ -z "${MULLE_SOURCETREE_LIBEXEC_DIR}" ]
   then
      echo "Fatal Error: Could not find libexec for ${MULLE_EXECUTABLE} ($PWD)" >&2
      exit 1
   fi

   #
   # minimal setup exit
   #
   if [ "$1" = "library-path" ]
   then
      echo "${MULLE_SOURCETREE_LIBEXEC_DIR}"
      exit 0
   fi

   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env library-path 2> /dev/null`"
   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      if [ -z "`command -v "${executablepath}"`" ]
      then
          echo "Fatal Error: Could not find mulle-bashfunctions-env in PATH (not installed ?)" >&2
      else
         echo "Fatal Error: Could not find libexec of mulle-bashfunctions-env ($PWD)" >&2
      fi
      exit 1
   fi
   local failmsg

   failmsg="failed to load bashfunctions from ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"

      # shellcheck source=../mulle-bashfunctions/src/mulle-string.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-string.sh"   || fail "${failmsg}"
      # shellcheck source=../mulle-bashfunctions/src/mulle-logging.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-logging.sh"  || fail "${failmsg}"
      # shellcheck source=../mulle-bashfunctions/src/mulle-exekutor.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-exekutor.sh" || fail "${failmsg}"
      # shellcheck source=../mulle-bashfunctions/src/mulle-options.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-options.sh"  || fail "${failmsg}"


   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   trap trap_fail INT
   set -o pipefail

   MULLE_ARGUMENTS="$*"
}

###
### INIT
###
########


_init "$@" # needs params
main "$@"
