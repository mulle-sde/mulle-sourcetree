#! /usr/bin/env bash
#
#   Copyright (c) 2015-2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = "YES" -o "${MULLE_SOURCETREE_TRACE}" = "YES" ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION="0.14.4"

#
# This is the main user interface to mulle-sourcetree
# sorta like git
#

trap_fail()
{
   exit 1
}



print_commands()
{
   local  show_all="${1:-NO}"

   SHOWN_COMMANDS="\
   add            : add a node to the sourcetree
   buildorder     : emit nodes that are buildable in proper dependency order
   clean          : remove files added by an update
   info           : print current sourcetree
   list           : list nodes in the current sourcetree
   set            : set a node's properties in the sourcetree
   status         : query state of the tree
   update         : update the project tree [default]"

   HIDDEN_COMMANDS="\
   dbstatus       : query state of database
   dotdump        : create a picture of the sourcetree or the database
   filter         : test a filter with user supplied marks
   fix            : support to track user modifications in the filesystem
   get            : get a node's properties from the sourcetree
   nameguess      : guess name of repository from URL
   libexec-dir    : print path to ${MULLE_USAGE_NAME} libexec
   knownmarks     : list known marks
   mark           : add or remove a mark from a node in the sourcetree
   move           : move a node within the sourcetree
   sourcetree-dir : print path to project (if a sourcetree exists)
   remove         : remove a node from the sourcetree
   reset          : clear the database, to force an update
   touch          : mark sourcetree as dirty
   typeguess      : guess type of repository from URL
   uname          : ${MULLE_USAGE_NAME}'s simplified uname(1)
   unmark         : remove marks from a node in the sourcetree
   version        : print ${MULLE_USAGE_NAME} version
   walk           : visit all the sourcetree nodes with a callback"


   echo "${SHOWN_COMMANDS}"

   if [ "${MULLE_UNAME}" = 'darwin' ]
   then
      echo "${DARWIN_COMMANDS}"
   fi

   if [ "${show_all}" != "NO" ]
   then
      echo "${HIDDEN_COMMANDS}"
   fi
}


usage()
{
   local verbose="${1:-NO}"

   cat <<EOF
Usage:
   ${MULLE_USAGE_NAME} [flags] [command] [options]

   Maintain a project sourcetree composed of multiple repositories
   and archives and other things. The sourcetree is backed by a database,
   which is created during \`update\`.

Flags:
EOF

   (
      cat <<EOF
   -e        : bypass mulle-env check
   -N        : bypass search for enclosing source tree
   --flat    : flat operation
   --recurse : recursive operation
   --share   : share operation (default)
EOF

      options_technical_flags_usage "     : "
   ) | LC_ALL=C sort

   cat <<EOF

Commands:
EOF

   print_commands "${verbose}" | sort

   if [ "${verbose}" = "NO" ]
   then
      cat <<EOF
      (use mulle-sourcetree -v help to show more commands)
EOF
   fi

   cat <<EOF
Options are command specific. Use mulle-sourcetree <command> -h for help.
EOF

   exit 1
}


_set_sourcetree_global()
{
   log_entry "_set_sourcetree_global" "$@"

   local physicalpwd="$1"

   #
   # SOURCETREE_START is /, if we are in MULLE_VIRTUAL_ROOT
   # otherwise calculate the relative path and append /
   #
   if [ "${MULLE_VIRTUAL_ROOT}" != "${physicalpwd}" ]
   then
      SOURCETREE_START="${physicalpwd#${MULLE_VIRTUAL_ROOT}}"
      if [ "${SOURCETREE_START}" = "${physicalpwd}" ]
      then
         fail "\"${physicalpwd}\" lies outside of MULLE_VIRTUAL_ROOT (${MULLE_VIRTUAL_ROOT}). \
Use -e if this is desired."
      fi
   fi
   SOURCETREE_START="${SOURCETREE_START}/"

   #
   # our db is specific to a host
   #
   if [ -z "${MULLE_HOSTNAME}" ]
   then
      MULLE_HOSTNAME="`hostname -s`"
   fi

   [ -z "${MULLE_SOURCETREE_DIR}" ] && internal_fail "MULLE_SOURCETREE_DIR is empty"

   # for testing let it be overrideable
   if [ -z "${SOURCETREE_DB_NAME}" ]
   then
      SOURCETREE_DB_NAME="${MULLE_SOURCETREE_DIR}/var/${MULLE_HOSTNAME}/db"
   fi
}


#
# The MULLE_VIRTUAL_ROOT is the "ceiling" we won't escape.
# The database and config root is based on this.
# But the actual database "root", that we are working on
# is PWD relative to MULLE_VIRTUAL_ROOT.
#
# Ex.
# MULLE_VIRTUAL_ROOT=/root
# PWD=/root/a.
#
# The SOURCETREE_START is /a/
#
_set_mulle_virtual_root_export()
{
   log_entry "_set_mulle_virtual_root_export" "$@"

   if [ "${FLAG_OUTSIDE_ENV}" = "YES" ]
   then
      MULLE_VIRTUAL_ROOT="${MULLE_EXECUTABLE_PHYSICAL_PWD}"
   fi

   case "${MULLE_VIRTUAL_ROOT}" in
      "")
         fail "To run ${MULLE_EXECUTABLE_NAME} outside of mulle-env, pass the -e flag"
      ;;

      */)
         fail "MULLE_VIRTUAL_ROOT \"${MULLE_VIRTUAL_ROOT}\" must not end with /"
      ;;
   esac

   #
   # We need a physical path here, but MULLE_VIRTUAL_ROOT may not exist yet.
   # If it doesn't, bail out
   #
   local physicalroot

   physicalroot="`physicalpath "${MULLE_VIRTUAL_ROOT}"`"
   [ -z "${physicalroot}" ] && fail "MULLE_VIRTUAL_ROOT \"${MULLE_VIRTUAL_ROOT}\" must exist"
   [ "${physicalroot}" = "/" ] && fail "MULLE_VIRTUAL_ROOT must not be /"

   MULLE_VIRTUAL_ROOT="${physicalroot}"
   export MULLE_VIRTUAL_ROOT
}


__check_is_physical_share_dir()
{
   log_entry "__check_is_physical_share_dir" "$@"

   local physical

   physical="`physicalpath "${MULLE_SOURCETREE_SHARE_DIR}"`"

   # if it doesn't exist then we can't say much about it
   if [ -z "${physical}" ]
   then
      return
   fi

   if [ "${physical}" != "${MULLE_SOURCETREE_SHARE_DIR}" ]
   then
      fail "MULLE_SOURCETREE_SHARE_DIR (${MULLE_SOURCETREE_SHARE_DIR}) is traversing symlinks"
   fi
}


__check_sane_share_dir()
{
   log_entry "__check_sane_share_dir" "$@"

   __check_is_physical_share_dir

   #
   # check that and absolute MULLE_SOURCETREE_SHARE_DIR does not go outside
   # MULLE_VIRTUAL_ROOT.
   # MEMO: I thinks this is actually a cool feature.

   case "${MULLE_SOURCETREE_SHARE_DIR}" in
      *".."*)
        fail "MULLE_SOURCETREE_SHARE_DIR contains .."
      ;;

      /*)
#          local relative
#
#          relative="`symlink_relpath "${MULLE_SOURCETREE_SHARE_DIR}" "${MULLE_VIRTUAL_ROOT}" `"
#          case "${relative}" in
#             *..*)
#                case "${MULLE_SHELL_MODE}" in
#                   SUBSHELL*)
#                   ;;
#
#                   *)
#                      log_warning "MULLE_SOURCETREE_SHARE_DIR \
# (${MULLE_SOURCETREE_SHARE_DIR}) lies outside of MULLE_VIRTUAL_ROOT \
# ($MULLE_VIRTUAL_ROOT)."
#                      log_fluff "Hint: MULLE_SOURCETREE_SHARE_DIR must not contain symlinks."
#                   ;;
#                esac
#             ;;
#          esac
      ;;

      "")
         internal_fail "MULLE_SOURCETREE_SHARE_DIR (${MULLE_SOURCETREE_SHARE_DIR}) is empty"
      ;;

      *"/")
         internal_fail "MULLE_SOURCETREE_SHARE_DIR (${MULLE_SOURCETREE_SHARE_DIR}) ends with /"
      ;;

      *)
         internal_fail "MULLE_SOURCETREE_SHARE_DIR (${MULLE_SOURCETREE_SHARE_DIR}) is not absolute"
      ;;
   esac

}


_set_share_dir()
{
   log_entry "_set_share_dir" "$@"

   local usershare_dir="$1"

   [ -z "${MULLE_VIRTUAL_ROOT}" ] && internal_fail "MULLE_VIRTUAL_ROOT must be defined by now"
   [ -z "${SOURCETREE_START}" ]   && internal_fail "SOURCETREE_START must be defined by now"

   if [ -z "${usershare_dir}" ]
   then
      #
      # try to recover old user choice for shared directory
      # this will override the ENVIRONMENT for consistency
      # but only if a the .db is not some trash
      # w/o a config
      #
      if cfg_exists "${SOURCETREE_START}"
      then
         local share_dir

         share_dir="`db_get_shareddir "${SOURCETREE_START}"`" || exit 1
         if [ -d "${share_dir}" ]
         then
            MULLE_SOURCETREE_SHARE_DIR="`physicalpath "${share_dir}" `"
         fi
      fi
   else
      MULLE_SOURCETREE_SHARE_DIR="${usershare_dir}"
   fi

   if [ "${MULLE_SOURCETREE_SHARE_DIR}" = "." ]
   then
      MULLE_SOURCETREE_SHARE_DIR=""
   fi

   case "${MULLE_SOURCETREE_SHARE_DIR}" in
      "")
         MULLE_SOURCETREE_SHARE_DIR="${MULLE_VIRTUAL_ROOT}"
      ;;

      "/"*)
         # MULLE_SOURCETREE_SHARE_DIR="${MULLE_SOURCETREE_SHARE_DIR}"
      ;;

      *)
         MULLE_SOURCETREE_SHARE_DIR="${MULLE_VIRTUAL_ROOT}/${MULLE_SOURCETREE_SHARE_DIR}"
      ;;
   esac
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE="NO"
   local MULLE_FLAG_IGNORE_GRAVEYARD="NO"

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN="NO"
   local MULLE_FLAG_LOG_LOCAL="NO"
   local MULLE_FLAG_LOG_DEBUG="NO"
   local MULLE_FLAG_LOG_EXEKUTOR="NO"
   local MULLE_FLAG_LOG_FLUFF="NO"
   local MULLE_FLAG_LOG_SCRIPTS="NO"
   local MULLE_FLAG_LOG_SETTINGS="NO"
   local MULLE_FLAG_LOG_VERBOSE="NO"
   local MULLE_FLAG_LOG_MERGE="NO"
   local MULLE_TRACE_POSTPONE="NO"

   local MULLE_FLAG_DEFER=""
   local FLAG_OUTSIDE_ENV="NO"

   local FLAG_SOURCETREE_MODE=

   MULLE_SOURCETREE_DIR="${MULLE_SOURCETREE_DIR:-.mulle-sourcetree}"
   MULLE_SOURCETREE_ETC_DIR="${MULLE_SOURCETREE_ETC_DIR:-${MULLE_SOURCETREE_DIR}/etc}"

   [ -z "${MULLE_SOURCETREE_DIR}" ] || is_absolutepath "${MULLE_SOURCETREE_DIR}"\
       && fail "invalid MULLE_SOURCETREE_DIR \"${MULLE_SOURCETREE_DIR}\""
   [ -z "${MULLE_SOURCETREE_ETC_DIR}" ] || is_absolutepath "${MULLE_SOURCETREE_ETC_DIR}"\
       && fail "invalid MULLE_SOURCETREE_ETC_DIR \"${MULLE_SOURCETREE_ETC_DIR}\""

   local SOURCETREE_CONFIG_FILE="${MULLE_SOURCETREE_ETC_DIR}/config"
   local SOURCETREE_FIX_FILE=".mulle-sourcetree-fix"

   local OPTION_SHARE_DIR

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -e)
            FLAG_OUTSIDE_ENV="YES"
         ;;

         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE="YES"
         ;;

         -h*|--help|help)
            usage "${MULLE_TRACE}"
         ;;

         -ls|--list-settings)
            MULLE_FLAG_LOG_SETTINGS="YES"
         ;;

         --git-terminal-prompt)
            [ $# -eq 1 ] && fail "Missing argument to \"$1\""
            shift

            GIT_TERMINAL_PROMPT="$1"
            export GIT_TERMINAL_PROMPT
         ;;

         #
         # DEFER MODES
         #
         -R|--defer-root)
            MULLE_FLAG_DEFER="ROOT"    # up to virtual root
         ;;

         -T|--defer-this)
            MULLE_FLAG_DEFER="NEAREST"    # this or next best
         ;;

         -P|--defer-parent)               # one above us
            MULLE_FLAG_DEFER="PARENT"
         ;;

         -N|--no-defer)                   # stay in PWD
            MULLE_FLAG_DEFER="NONE"
         ;;

         -V|--virtual-root)                # stay in PWD
            MULLE_FLAG_DEFER="VIRTUAL"
         ;;

         -r|--recurse|--recursive)
            FLAG_SOURCETREE_MODE="recurse"
         ;;

         --flat)
            FLAG_SOURCETREE_MODE="flat"
         ;;

         --share)
            FLAG_SOURCETREE_MODE="share"
         ;;

         --share-dir)
            [ $# -eq 1 ] && fail "Missing argument to \"$1\""
            shift

            OPTION_SHARE_DIR="$1"
         ;;

         --version)
            echo "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -*)
            log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown flag \"$1\""
            usage "${MULLE_TRACE}"
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   # shellcheck source=mulle-sourcetree-db.sh
   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-db.sh"       || exit 1
   # shellcheck source=mulle-sourcetree-nodemarks.sh
   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-nodemarks.sh"|| exit 1
   # shellcheck source=mulle-sourcetree-node.sh
   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-node.sh"     || exit 1
   # shellcheck source=mulle-sourcetree-nodeline.sh
   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-nodeline.sh" || exit 1
   # shellcheck source=mulle-sourcetree-cfg.sh
   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-cfg.sh"      || exit 1

   local MULLE_EXECUTABLE_PHYSICAL_PWD

   MULLE_EXECUTABLE_PHYSICAL_PWD="`pwd -P`"

   _set_mulle_virtual_root_export

   local SOURCETREE_START

   if [ "${MULLE_FLAG_DEFER}" = "VIRTUAL" ]
   then
      [ -z "${MULLE_VIRTUAL_ROOT}" ] && fail "MULLE_VIRTUAL_ROOT not set"

      cd "${MULLE_VIRTUAL_ROOT}"

      _set_sourcetree_global "${MULLE_EXECUTABLE_PHYSICAL_PWD}"
   else
      _set_sourcetree_global "${MULLE_EXECUTABLE_PHYSICAL_PWD}"

      if ! cfg_defer_if_needed "${MULLE_FLAG_DEFER:-NEAREST}"
      then
         # could be an add, so can't really quit here
         if [ "${MULLE_FLAG_DEFER}" = "PARENT" ]
         then
            exit 1
         fi
      fi
   fi


   _set_share_dir "${OPTION_SHARE_DIR}"

      # why is this after _set_sourcetree_global ?

   cmd="${1}"
   [ $# -eq 0 ] || shift

   MULLE_FETCH="${MULLE_FETCH:-`command -v "mulle-fetch"`}"
   if [ -z "${MULLE_FETCH}" ]
   then
      fail "mulle-fetch not in PATH"
   fi

   #
   # dont' check if resetting
   # for status it's debatable, but I don't like it
   # for buildorder, we want to be fast so we don't check and dont get
   # default mode
   #
   case "${cmd}" in
      reset|buildorder)
      ;;

      *)
         __check_sane_share_dir
      ;;
   esac

   local SOURCETREE_MODE

   _db_set_default_mode "${SOURCETREE_START}" "${FLAG_SOURCETREE_MODE}" || exit 1

   if [ "${MULLE_FLAG_LOG_SETTINGS}" = "YES" ]
   then
      log_trace2 "MULLE_EXECUTABLE_PHYSICAL_PWD=${MULLE_EXECUTABLE_PHYSICAL_PWD}"
      log_trace2 "MULLE_SOURCETREE_DIR=${MULLE_SOURCETREE_DIR}"
      log_trace2 "MULLE_SOURCETREE_ETC_DIR=${MULLE_SOURCETREE_ETC_DIR}"
      log_trace2 "MULLE_SOURCETREE_SHARE_DIR=${MULLE_SOURCETREE_SHARE_DIR}"
      log_trace2 "MULLE_VIRTUAL_ROOT=${MULLE_VIRTUAL_ROOT}"
      log_trace2 "PWD=${PWD}"
      log_trace2 "SOURCETREE_CONFIG_FILE=${SOURCETREE_CONFIG_FILE}"
      log_trace2 "SOURCETREE_DB_NAME=${SOURCETREE_DB_NAME}"
      log_trace2 "SOURCETREE_FIX_FILE=${SOURCETREE_FIX_FILE}"
      log_trace2 "SOURCETREE_MODE=${SOURCETREE_MODE}"
      log_trace2 "SOURCETREE_START=${SOURCETREE_START}"
   fi

   case "${cmd}" in
      add)
         # shellcheck source=src/mulle-sourcetree-config.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-config.sh"

         sourcetree_add_main "$@"
      ;;

      buildorder)
         # shellcheck source=src/mulle-sourcetree-buildorder.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-buildorder.sh"

         sourcetree_buildorder_main "$@"
      ;;

      clean)
         # shellcheck source=src/mulle-sourcetree-clean.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-clean.sh"

         sourcetree_clean_main "$@"
      ;;

      dbstatus)
         # shellcheck source=src/mulle-sourcetree-clean.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-status.sh"

         sourcetree_dbstatus_main "$@"
      ;;

      dotdump)
         # shellcheck source=src/mulle-sourcetree-dotdump.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-dotdump.sh"

         sourcetree_dotdump_main "$@"
      ;;

      filter)
         # shellcheck source=src/mulle-sourcetree-fix.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-nodemarks.sh"

         if nodemarks_filter_with_qualifier "$@"
         then
            echo "YES"
         else
            echo "NO"
         fi
      ;;

      fix)
         # shellcheck source=src/mulle-sourcetree-fix.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-fix.sh"

         sourcetree_fix_main "$@"
      ;;

      get)
         # shellcheck source=src/mulle-sourcetree-config.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-config.sh"

         sourcetree_get_main "$@"
      ;;

      info)
         # shellcheck source=src/mulle-sourcetree-config.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-config.sh"

         sourcetree_info_main "$@"
      ;;

      knownmarks)
         # shellcheck source=src/mulle-sourcetree-config.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-config.sh"

         sourcetree_knownmarks_main "$@"
      ;;

      libexec-dir|library-path)
         echo "${MULLE_SOURCETREE_LIBEXEC_DIR}"
      ;;

      list)
         # shellcheck source=src/mulle-sourcetree-config.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-list.sh"

         sourcetree_list_main "$@"
      ;;

      mark)
         # shellcheck source=src/mulle-sourcetree-config.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-config.sh"

         sourcetree_mark_main "$@"
      ;;

      move)
         # shellcheck source=src/mulle-sourcetree-config.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-config.sh"

         sourcetree_move_main "$@"
      ;;

      nameguess)
         # shellcheck source=src/mulle-sourcetree-config.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-config.sh"

         sourcetree_nameguess_main "$@"
      ;;

      pwd|path)
         # shellcheck source=src/mulle-sourcetree-walk.sh
         pwd -P   # prefer physical path for our needs
      ;;

      sourcetree-dir)
         # we should be there now
         if [ -d "${MULLE_SOURCETREE_DIR}" ]
         then
            pwd -P
         fi
      ;;

      remove)
         # shellcheck source=src/mulle-sourcetree-config.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-config.sh"

         sourcetree_remove_main "$@"
      ;;

      reset)
         # shellcheck source=src/mulle-sourcetree-reset.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-reset.sh"

         sourcetree_reset_main "$@"
      ;;

      set)
         # shellcheck source=src/mulle-sourcetree-config.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-config.sh"

         sourcetree_set_main "$@"
      ;;

      status)
         # shellcheck source=src/mulle-sourcetree-status.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-status.sh"

         sourcetree_status_main "$@"
      ;;

      touch)
         if [ -f "${MULLE_SOURCETREE_ETC_DIR}/config}" ]
         then
            exekutor touch "${MULLE_SOURCETREE_ETC_DIR}/config"
         fi
      ;;

      typeguess)
         # shellcheck source=src/mulle-sourcetree-config.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-config.sh"

         sourcetree_typeguess_main "$@"
      ;;

      uname)
         echo "${MULLE_UNAME}"
      ;;

      unmark)
         # shellcheck source=src/mulle-sourcetree-config.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-config.sh"

         sourcetree_unmark_main "$@"
      ;;

      update)
         # shellcheck source=src/mulle-sourcetree-update.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-update.sh"

         sourcetree_update_main "$@"
      ;;

      walk)
         # shellcheck source=src/mulle-sourcetree-walk.sh
         . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-walk.sh"

         sourcetree_walk_main "$@"
      ;;

      version)
         echo "${MULLE_EXECUTABLE_VERSION}"
         return 0
      ;;

      *)
         log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown command \"${cmd}\""
         usage "${MULLE_TRACE}"
      ;;
   esac
}


########
###
### INIT
###
_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      echo "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
      if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
      then
         if [ -z "`command -v "${executablepath}"`" ]
         then
             echo "Fatal Error: Could not find mulle-bashfunctions-env in PATH (not installed ?)" >&2
         else
            echo "Fatal Error: Could not find libexec of mulle-bashfunctions-env ($PWD)" >&2
         fi
         exit 1
      fi
   fi

      # shellcheck source=../mulle-bashfunctions/src/mulle-string.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" || \
      internal_fail "failed to load bashfunctions from ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"
   # shellcheck source=../mulle-bashfunctions/src/mulle-path.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh"             || exit 1
   # shellcheck source=../mulle-bashfunctions/src/mulle-file.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-file.sh"             || exit 1

   local _libexec_dir

   _get_libexec_dir "$0" "mulle-sourcetree" "mulle-sourcetree-config.sh"

   MULLE_SOURCETREE_LIBEXEC_DIR="${_libexec_dir}"

   #
   # minimal setup exit
   #
   case "$1" in
      "libexec-dir"|"library-path")
         echo "${MULLE_SOURCETREE_LIBEXEC_DIR}"
         exit 0
      ;;
   esac

   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   trap trap_fail INT
   set -o pipefail

   MULLE_ARGUMENTS="$*"
}
###
### INIT
###
########


_init "$@" # needs params
main "$@"
