#! /usr/bin/env mulle-bash
# shellcheck shell=bash
#
#   Copyright (c) 2018 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' -o "${MULLE_C_SOURCETREE_REFLECT_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION="1.2.0"


usage()
{
   cat <<EOF >&2
Usage:
   ${MULLE_USAGE_NAME} [flags]

   Produce _<project>-include.h files and related headers. Also can produce
   #import files for Objective-C.

   This tool reads the contents of the sourcetree and uses the information to
   produce header files.

   Node info used:
      address    : to generate the default include <name>
      marks      : see below
      include    : specifies include name to use, if present

   Marks used:
      dependency : slightly different semantics for default include generation
      require    : fence with \`#if __has_include\`
      import     : use "import" instead of "include"
      public     : takes part in the generation of the public include file
      platform   : to produce \`#ifndef __APPLE__\` and such

Flags:
   --import      : Emit import files
   --no-import   : Don't emit import files
   --stdout      : Emit to stdout instead
   --unames      : List known unames and their known cpp equivalent

Environment:
   MULLE_SOURCETREE_TO_C_INCLUDE_FILE        | Use DISABLE to turn off
   MULLE_SOURCETREE_TO_C_IMPORT_FILE         | file generation. NONE to emit an
   MULLE_SOURCETREE_TO_C_PRIVATEINCLUDE_FILE | empty file. - outputs to stdout.
   MULLE_SOURCETREE_TO_C_PRIVATEIMPORT_FILE  | Otherwise specify the filename.
EOF
   exit 1
}


r_uname_to_cpp()
{
   log_entry "r_uname_to_cpp" "$@"

   local uname="$1"  # the part after only-os or no

   case "${uname}" in
      'darwin')
         RVAL="__APPLE__"
      ;;

      'freebsd')
         RVAL="__FreeBSD__"  # guess
      ;;

      'windows'|'mingw'*)
         RVAL="_WIN32"
      ;;

      *)
         RVAL="__${uname}__"
      ;;
   esac
}


list_unames()
{
   log_entry "list_unames" "$@"

   local i

   r_uname_to_cpp "${MULLE_UNAME}"
   printf "%s : %s\n" "${MULLE_UNAME}" "${RVAL}"

   shell_disable_glob
   for i in darwin freebsd mingw
   do
      if [ "$i" != "${MULLE_UNAME}" ]
      then
         r_uname_to_cpp "$i"
         printf "%s : %s\n" "${i}" "${RVAL}"
      fi
   done
   shell_enable_glob
}



r_sdk_to_cpp()
{
   log_entry "r_sdk_to_cpp" "$@"

   local sdk="$1"  # the part after only-os or no

   case "${sdk}" in
      'glibc')
         RVAL=
      ;;

      'musl')
         RVAL="__MULLE_MUSL__"  # guess
      ;;

      'cosmopolitan')
         RVAL="__MULLE_COSMOPOLITAN__"
      ;;

      *)
         r_uppercase "${sdk}"
      ;;
   esac
}


list_sdks()
{
   log_entry "list_sdks" "$@"

   local i

   .for i in glibc musl cosmopolitan
   .do
      r_sdk_to_cpp "$i"
      printf "%s : %s\n" "${i}" "${RVAL}"
   .done
}



r_platformexclude_to_cpp_if()
{
   log_entry "r_platformexclude_to_cpp_if" "$@"

   local marks="$1"

   local cppvar

   local excludes
   local onlys

   shell_disable_glob ; IFS=","

   local mark

   for mark in ${marks}
   do
      IFS="${DEFAULT_IFS}"; shell_enable_glob

      case "${mark}" in
         only-platform-*)
				r_uname_to_cpp "${mark:14}"
            r_concat "${onlys}" "defined( ${RVAL})" " || "
            onlys="${RVAL}"
         ;;

         only-craft-platform-*)
            r_uname_to_cpp "${mark:20}"
            r_concat "${onlys}" "defined( ${RVAL})" " || "
            onlys="${RVAL}"
         ;;

         no-craft-platform-*)
            r_uname_to_cpp "${mark:18}"
            r_concat "${excludes}" "! defined( ${RVAL})" " && "
            excludes="${RVAL}"
         ;;

         no-platform-*)
				r_uname_to_cpp "${mark:12}"
            r_concat "${excludes}" "! defined( ${RVAL})" " && "
            excludes="${RVAL}"
         ;;
      esac
   done
   IFS="${DEFAULT_IFS}"; shell_enable_glob

   if [ ! -z "${onlys}" ]
   then
      RVAL="# if ${onlys}"
      return
   fi

   if [ ! -z "${excludes}" ]
   then
      RVAL="# if ${excludes}"
      return
   fi

   RVAL=""
}


r_sdk_exclude_to_cpp_if()
{
   log_entry "r_sdk_exclude_to_cpp_if" "$@"

   local marks="$1"

   local cppvar

   local excludes
   local onlys

   local mark

   .foreachitem mark in ${marks}
   .do
      case "${mark}" in
         only-sdk-*)
            r_sdk_to_cpp "${mark:9}"
            r_concat "${onlys}" "defined( ${RVAL})" " || "
            onlys="${RVAL}"
         ;;

         only-craft-sdk-*)
            r_sdk_to_cpp "${mark:15}"
            r_concat "${onlys}" "defined( ${RVAL})" " || "
            onlys="${RVAL}"
         ;;

         no-craft-sdk-*)
            r_sdk_to_cpp "${mark:13}"
            r_concat "${excludes}" "! defined( ${RVAL})" " && "
            excludes="${RVAL}"
         ;;

         no-sdk-*)
            r_sdk_to_cpp "${mark:7}"
            r_concat "${excludes}" "! defined( ${RVAL})" " && "
            excludes="${RVAL}"
         ;;
      esac
   .done

   if [ ! -z "${onlys}" ]
   then
      RVAL="# if ${onlys}"
      return
   fi

   if [ ! -z "${excludes}" ]
   then
      RVAL="# if ${excludes}"
      return
   fi

   RVAL=""
}


_emit_c_include()
{
   log_entry "_emit_c_include" "$@"

   local uuid="$1"
   local address="$2"
   local marks="$3"
   local header="$4"

   local indent
   local ifstatement1
   local ifstatement2
   local include
   local mark
   local tinclude

   #
   # so objc can reuse this, make a provision for import with --objc flag
   # but allow #include if the mark no-objc is set
   #
   include="include"
   tinclude="include:"
   if [ "${OPTION_IMPORT}" = 'YES' ]
   then
      include="import"
      tinclude="import: "

      case ",${marks}," in
         *,no-import,*)
            include="include"
            tinclude="include:"
         ;;
      esac
   fi

   cat <<EOF
// You can tweak the following #$include with these commands.
// (Use ${uuid} instead of ${address} if there are duplicate entries)
//    remove #${tinclude}: \`mulle-sde dependency mark ${address} no-header\`
//    rename:              \`mulle-sde dependency|library set ${address} include whatever.h\`
//    reorder:             \`mulle-sde dependency move ${address} <up|down>\`
//    toggle #${tinclude}    \`mulle-sde dependency mark ${address} [no-]import\`
//    toggle public:       \`mulle-sde dependency mark ${address} [no-]public\`
//    toggle optional:     \`mulle-sde dependency mark ${address} [no-]require\`
//    remove for platform: \`mulle-sde dependency mark ${address} no-platform-<uname>\`
//        (use \`mulle-sourcetree-to-c --unames\` to list known values)
EOF
   if [ ! -z "${marks}" ]
   then
   	r_platformexclude_to_cpp_if "${marks}"
      ifstatement1="${RVAL}"

      r_sdk_exclude_to_cpp_if "${marks}"
      ifstatement2="${RVAL}"
   fi

   if [ ! -z "${ifstatement1}" ]
   then
      printf "%s\n" "${ifstatement1}"
      indent=" "
   fi

   if [ ! -z "${ifstatement2}" ]
   then
      printf "%s%s\n" "{indent}" "${ifstatement2}"
      indent="${indent} "
   fi

   # TODO: remove support __has_include for C ? Not all C compilers have
   #       __has_include
   # but if we check for __has_include and it's not there, then we are
   # not loading a required header... hmm
   #
   case ",${marks}," in
      *,no-require,*|*,no-require-os-${MULLE_UNAME},*)
         local name

         r_tweaked_de_camel_case "${address}"
         r_identifier "${RVAL}"
         r_uppercase "${RVAL}"
         name="${RVAL}"

         cat <<EOF
#${indent}ifdef __has_include
#${indent} if __has_include(<${header}>)
#${indent}  ${indent}${include} <${header}>   // ${address}
#${indent}  define HAVE_LIB_${name%%_}
#${indent} endif
#${indent}endif
EOF
      ;;

      *)
         echo "#${indent}${include} <${header}>   // ${address}"
      ;;
   esac

   if [ ! -z "${ifstatement2}" ]
   then
      indent="${indent%\ }"
      printf "%s%s\n" "${indent}" "#endif"
   fi


   if [ ! -z "${ifstatement1}" ]
   then
      indent="${indent%\ }"
      printf "%s%s\n" "${indent}" "#endif"
   fi

   echo
}


emit_c_include_library()
{
   log_entry "emit_c_include_library" "$@"

   local uuid="$1"
   local address="$2"
   local marks="$3"
   local header="$4"

   #
   # the default for libraries is old style <name.h> not <name/name.h>
   #
   if [ -z "${header}" ]
   then
      local name

      r_basename "${address%#*}"
      name="${RVAL}"
      header="${name}.h"
   fi

   _emit_c_include "${uuid}" "${address}" "${marks}" "${header}"
}


emit_c_include_dependency()
{
   log_entry "emit_c_include_dependency" "$@"

   local uuid="$1"
   local address="$2"
   local marks="$3"
   local header="$4"

   #
   # the default for dependencies is <name/name.h>
   #
   if [ -z "${header}" ]
   then
      local name

      r_basename "${address%#*}"
      name="${RVAL}"
      header="${name}/${name}.h"
   fi

   _emit_c_include "${uuid}" "${address}" "${marks}" "${header}"
}


emit_c_header()
{
   log_entry "emit_c_header" "$@"

   local marks="$1"

   local filter_marks

   r_comma_concat "header" "${marks}"
   filter_marks="${RVAL}"

   # since the order of the headers is important and needs to be in treeorder
   # we use mulle-sourcetree directly
   local headers

   # if mulle-sourcetree fails with 127 its ok
   local rval 

   headers="`exekutor mulle-sourcetree list \
                                       --format "%_;%a;%m;%i={include,,-------}\\n" \
                                       --marks "${filter_marks}" \
                                       --no-bequeath \
                                       --output-format raw \
                                       --no-output-header`"
   rval=$?

   if [ $rval -ne 0 -a $rval -ne 127 ]
   then 
      return $rval 
   fi

   log_setting "headers=${headers}"

   local dependency
   local address
   local include
   local uuid

   .foreachline header in ${headers}
   .do
      IFS=";" read uuid address marks include <<< "${header}"

      if [ -z "${uuid}" ]
      then
         .continue
      fi

      log_verbose "Emit cmake statements for ${C_MAGENTA}${C_BOLD}${address}"

      case ",${marks}," in
         *,no-dependency,*)
            emit_c_include_library "${uuid}" \
                                   "${address}" \
                                   "${marks}" \
                                   "${include}" \
                                   "$@"
         ;;

         *)
            emit_c_include_dependency "${uuid}" \
                                      "${address}" \
                                      "${marks}" \
                                      "${include}" \
                                      "$@"
         ;;
      esac
   .done
}


output_file()
{
   log_entry "output_file" "$@"

   local filename="$1"
   local text="$2"
   local title="$3"
   local varname="$4"

   if [ "${filename}" = "-" ]
   then
      log_info "${title}"
      rexekutor printf "%s\n" "${text}"
      return $?
   fi

   log_verbose "mulle-sourcetree-to-c writes ${C_RESET_BOLD}${filename}"

   r_mkdir_parent_if_missing "${filename}"
   if [ -f "${filename}" ] 
   then 
      exekutor chmod a+w "${filename}" || _fatal "Can't unprotect \"${filename}\"" 
   fi
   if redirect_exekutor "${filename}" printf "%s\n" "${text}"
   then
      exekutor chmod a-w "${filename}"
      return 0
   fi

   log_error "Failed to write \"${filename}\""
   return 1
}


r_text_info_none()
{
   local key="$1"

   RVAL="/* Contents suppressed by ${key} NONE.
* Use
*   mulle-sde environment set ${key} DISABLE
* to not generate this file.
*
* Use
*   mulle-sde environment set MULLE_SOURCETREE_TO_C_RUN DISABLE
* to not generate any header files.
*/"
}


r_text_info_on()
{
   local key="$1"
   local extra="$2"

   RVAL="/*
 *   This file will be regenerated by \`mulle-sourcetree-to-c${extra}\` via
 *   \`mulle-sde reflect\` and any edits will be lost.
 *   Suppress generation of this file with:
 *
 *      mulle-sde environment set ${key} DISABLE
 *
 *   To not let mulle-sourcetree-to-c generate any header files:
 *
 *      mulle-sde environment set MULLE_SOURCETREE_TO_C_RUN DISABLE
 *
 */"
}


c_include()
{
   log_entry "c_include" "$@"

   local projectname="$1"
   local projectidentifier="$2"

   local text_h

   case "${MULLE_SOURCETREE_TO_C_INCLUDE_FILE}" in
      ON|YES)
         MULLE_SOURCETREE_TO_C_INCLUDE_FILE=""
      ;;
   esac

   case "${MULLE_SOURCETREE_TO_C_INCLUDE_FILE}" in
      NO|DISABLE*)
         return
      ;;

      NONE)
         r_text_info_none 'MULLE_SOURCETREE_TO_C_INCLUDE_FILE'
         text_h="${RVAL}"
      ;;
   esac
   MULLE_SOURCETREE_TO_C_INCLUDE_FILE="${MULLE_SOURCETREE_TO_C_INCLUDE_FILE:-\
${PROJECT_SOURCE_DIR:-src}/reflect/_${projectname}-include.h}"

   if [ -z "${text_h}" ]
   then
      local marks

      case "${PROJECT_DIALECT}" in
         'objc')
            marks="public,no-import,include,header"
         ;;

         *)
            marks="public,include,header"
         ;;
      esac

      text_h="`emit_c_header "${marks}"`" || exit 1

      if [ -z "${text_h}" ]
      then
         text_h="/* no headers */"
      fi

      r_text_info_on 'MULLE_SOURCETREE_TO_C_INCLUDE_FILE'
      text_h="${RVAL}

#ifndef _${projectidentifier}_include_h__
#define _${projectidentifier}_include_h__

${text_h}

#endif"
   fi

   output_file  "${MULLE_SOURCETREE_TO_C_INCLUDE_FILE}" \
                "${text_h}" \
                "_${projectname}-include.h" \
                "MULLE_SOURCETREE_TO_C_INCLUDE_FILE"
}


objc_import()
{
   log_entry "objc_import" "$@"

   local projectname="$1"
   local projectidentifier="$2"

   local text_h
   local marks

   case "${MULLE_SOURCETREE_TO_C_IMPORT_FILE}" in
      ON|YES)
         MULLE_SOURCETREE_TO_C_IMPORT_FILE=""
      ;;
   esac

   marks="public,import,header"
   case "${MULLE_SOURCETREE_TO_C_IMPORT_FILE}" in
      NO|DISABLE*)
         return
      ;;

      NONE)
         MULLE_SOURCETREE_TO_C_IMPORT_FILE=""
         r_text_info_none 'MULLE_SOURCETREE_TO_C_IMPORT_FILE'
         text_h="${RVAL}"
      ;;

      *)
         case "${MULLE_SOURCETREE_TO_C_INCLUDE_FILE}" in
            DISABLE)  # no star is intentional
               marks="public,header"
            ;;
         esac
      ;;
   esac
   MULLE_SOURCETREE_TO_C_IMPORT_FILE="${MULLE_SOURCETREE_TO_C_IMPORT_FILE:-\
${PROJECT_SOURCE_DIR:-src}/reflect/_${projectname}-import.h}"

   if [ -z "${text_h}" ]
   then
      text_h="`emit_c_header "${marks}"`" || exit 1

      if [ -z "${text_h}" ]
      then
         text_h="/* no headers */"
      fi

      #
      # if we generate an include file, we want that
      #
      case "${MULLE_SOURCETREE_TO_C_INCLUDE_FILE}" in
         DISABLE|NONE)
         ;;

         *)
            # for mulle-objc its important that the #include is afterwards
            text_h="${text_h}

#ifdef __has_include
# if __has_include( \"_${projectname}-include.h\")
#  include \"_${projectname}-include.h\"
# endif
#endif
"
         ;;
      esac

      r_text_info_on 'MULLE_SOURCETREE_TO_C_IMPORT_FILE' ' --project-dialect objc'
      text_h="${RVAL}

${text_h}"
   fi

   output_file  "${MULLE_SOURCETREE_TO_C_IMPORT_FILE}" \
                "${text_h}" \
                "_${projectname}-import.h" \
                "MULLE_SOURCETREE_TO_C_IMPORT_FILE"
}


c_include_private()
{
   log_entry "c_include_private" "$@"

   local projectname="$1"
   local projectidentifier="$2"

   local text_h

   case "${MULLE_SOURCETREE_TO_C_PRIVATEINCLUDE_FILE}" in
      ON|YES)
         MULLE_SOURCETREE_TO_C_PRIVATEINCLUDE_FILE=""
      ;;
   esac

   case "${MULLE_SOURCETREE_TO_C_PRIVATEINCLUDE_FILE}" in
      NO|DISABLE*)
         return
      ;;

      NONE)
         MULLE_SOURCETREE_TO_C_PRIVATEINCLUDE_FILE=
         r_text_info_none 'MULLE_SOURCETREE_TO_C_PRIVATEINCLUDE_FILE'
         text_h="${RVAL}"
      ;;
   esac

   MULLE_SOURCETREE_TO_C_PRIVATEINCLUDE_FILE="${MULLE_SOURCETREE_TO_C_PRIVATEINCLUDE_FILE:-\
${PROJECT_SOURCE_DIR:-src}/reflect/_${projectname}-include-private.h}"

   if [ -z "${text_h}" ]
   then
      local marks

      case "${PROJECT_DIALECT}" in
         'objc')
            marks="no-public,no-import,include,header"
         ;;

         *)
            marks="no-public,include,header"
         ;;
      esac

      text_h="`emit_c_header "${marks}"`" || exit 1

      if [ -z "${text_h}" ]
      then
         text_h="/* no headers */"
      fi

      r_text_info_on 'MULLE_SOURCETREE_TO_C_PRIVATEINCLUDE_FILE'
      text_h="${RVAL}

#ifndef _${projectidentifier}_include_private_h__
#define _${projectidentifier}_include_private_h__

${text_h}

#endif"
   fi

   output_file "${MULLE_SOURCETREE_TO_C_PRIVATEINCLUDE_FILE}" \
               "${text_h}" \
               "_${projectname}-include-private.h" \
               "MULLE_SOURCETREE_TO_C_PRIVATEINCLUDE_FILE"
}


objc_import_private()
{
   log_entry "objc_import_private" "$@"

   local projectname="$1"
   local projectidentifier="$2"

   local text_h
   local marks

   case "${MULLE_SOURCETREE_TO_C_PRIVATEIMPORT_FILE}" in
      ON|YES)
         MULLE_SOURCETREE_TO_C_PRIVATEIMPORT_FILE=""
      ;;
   esac

   marks="no-public,import,header"
   case "${MULLE_SOURCETREE_TO_C_PRIVATEIMPORT_FILE}" in
      NO|DISABLE*)
         return
      ;;

      NONE)
         r_text_info_none 'MULLE_SOURCETREE_TO_C_PRIVATEIMPORT_FILE'
         text_h="${RVAL}"
      ;;

      *)
         case "${MULLE_SOURCETREE_TO_C_PRIVATEINCLUDE_FILE}" in
            DISABLE) # no star is intentional
               marks="no-public,import,include,header"
            ;;
         esac
      ;;
   esac
   MULLE_SOURCETREE_TO_C_PRIVATEIMPORT_FILE="${MULLE_SOURCETREE_TO_C_PRIVATEIMPORT_FILE:-\
${PROJECT_SOURCE_DIR:-src}/reflect/_${projectname}-import-private.h}"

   if [ -z "${text_h}" ]
   then
      text_h="`emit_c_header "${marks}"`" || exit 1

      if [ -z "${text_h}" ]
      then
         text_h="/* no headers */"
      fi

      #
      # if we generate an include file, we want that
      #
      case "${MULLE_SOURCETREE_TO_C_PRIVATEINCLUDE_FILE}" in
         DISABLE|NONE)
         ;;

         *)
            text_h="${text_h}

#ifdef __has_include
# if __has_include( \"_${projectname}-include-private.h\")
#  include \"_${projectname}-include-private.h\"
# endif
#endif"

         ;;
      esac

      r_text_info_on 'MULLE_SOURCETREE_TO_C_PRIVATEIMPORT_FILE' ' --project-dialect objc'
      text_h="${RVAL}
${text_h}"
   fi

   output_file "${MULLE_SOURCETREE_TO_C_PRIVATEIMPORT_FILE}" \
               "${text_h}" \
               "_${projectname}-import-private.h" \
               "MULLE_SOURCETREE_TO_C_PRIVATEIMPORT_FILE"
}


main()
{
   log_entry "main" "$@"

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_DONT_DEFER='NO'
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_FOLLOW_SYMLINKS='YES'
   local MULLE_FLAG_LOG_CACHE='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_TRACE_PATHS_FLIP_X='NO'
   local MULLE_TRACE_POSTPONE='NO'
   local MULLE_TRACE_RESOLVER_FLIP_X='NO'
   local MULLE_TRACE_SETTINGS_FLIP_X='NO'

   local OPTION_IMPORT="DEFAULT"

   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h*|--help|help)
            usage
         ;;

         --import)
            OPTION_IMPORT='YES'
         ;;

         --no-import)
            OPTION_IMPORT='NO'
         ;;

         -p|--project-name)
            [ "$#" -eq 1 ] && usage "Missing argument to \"$1\""
            shift

            PROJECT_NAME="$1"
         ;;

         -t|--project-type)
            [ "$#" -eq 1 ] && usage "Missing argument to \"$1\""
            shift

            PROJECT_TYPE="$1"
         ;;

         --project-source-dir)
            [ "$#" -eq 1 ] && usage "Missing argument to \"$1\""
            shift

            PROJECT_SOURCE_DIR="$1"
         ;;

         --project-dialect)
            [ "$#" -eq 1 ] && usage "Missing argument to \"$1\""
            shift

            PROJECT_DIALECT="$1"
         ;;

         --stdout)
            MULLE_SOURCETREE_TO_C_INCLUDE_FILE="-"
            MULLE_SOURCETREE_TO_C_PRIVATEINCLUDE_FILE="-"
            MULLE_SOURCETREE_TO_C_IMPORT_FILE="-"
            MULLE_SOURCETREE_TO_C_PRIVATEIMPORT_FILE="-"
         ;;

         --unames)
            list_unames
            return 0
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            return 0
         ;;

         -*)
            log_error "Unknown option \"$1\""
            usage
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   if [ -z "${MULLE_CASE_SH}" ]
   then
      # shellcheck source=mulle-case.sh
      . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-case.sh" || return 1
   fi

   if [ -z "${PROJECT_NAME}" ]
   then
   	r_basename "${PWD}"
      PROJECT_NAME="${RVAL}" # could be nicer
   fi

   if [ -z "${PROJECT_IDENTIFIER}" ]
   then
      r_identifier "${PROJECT_NAME}"
      PROJECT_IDENTIFIER="${RVAL}"
   fi

   if [ -z "${PROJECT_DOWNCASE_IDENTIFIER}" ]
   then
      r_tweaked_de_camel_case "${PROJECT_IDENTIFIER}"
      r_lowercase "${RVAL}"
      PROJECT_DOWNCASE_IDENTIFIER="${RVAL}"
   fi

   PROJECT_SOURCE_DIR="${PROJECT_SOURCE_DIR:-.}"
   PROJECT_DIALECT="${PROJECT_DIALECT:-c}"

   c_include "${PROJECT_NAME}" "${PROJECT_DOWNCASE_IDENTIFIER}"         || _fatal "c_include failed"
   c_include_private "${PROJECT_NAME}" "${PROJECT_DOWNCASE_IDENTIFIER}" || _fatal "c_include_private failed"

   if [ "${PROJECT_DIALECT}" = "objc" ]
   then
      if [ "${OPTION_IMPORT}" = "DEFAULT" ]
      then
         OPTION_IMPORT='YES'
      fi

      objc_import "${PROJECT_NAME}" "${PROJECT_IDENTIFIER}"         || _fatal "objc_import failed"
      objc_import_private "${PROJECT_NAME}" "${PROJECT_IDENTIFIER}" || _fatal "objc_import_private failed"
   fi

   :
}

call_with_flags "main" "${MULLE_SOURCETREE_TO_CMAKE_FLAGS}" "$@"
