#! /bin/sh
#
#   Copyright (c) 2018 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#

[ "${TRACE}" = 'YES' -o "${MULLE_CMAKE_SOURCETREE_REFLECT_TRACE}" = 'YES' ] && set -x && : "$0" "$@"

####
#
# Prelude to be placed at top of each script. Rerun this script either in
# bash or zsh, if not already running in either (which can happen!)
# Allows script to run on systems that either have bash (linux) or
# zsh (macOS) only by default.

if [ "$1" != --no-auto-shell ]
then
   if [ -z "${BASH_VERSION}" -a -z "${ZSH_VERSION}" ]
   then
      exe_shell="`command -v "bash" `"
      exe_shell="${exe_shell:-`command -v "zsh" `}"

      script="$0"

      #
      # Quote incoming arguments for shell expansion
      #
      args=""
      for arg in "$@"
      do
         # True bourne sh doesn't know ${a//b/c} and <<<
         case "${arg}" in
            *\'*)
               # Use cat instead of echo to avoid possible echo -n
               # problems. Escape single quotes in string.
               arg="`cat <<EOF | sed -e s/\'/\'\\\"\'\\\"\'/g
${arg}
EOF
`"
            ;;
         esac
         if [ -z "${args}" ]
         then
            args="'${arg}'"
         else
            args="${args} '${arg}'"
         fi
      done

      #
      # bash/zsh will use arg after -c <arg> as $0, convenient!
      #

      exec "${exe_shell:-bash}" -c ". ${script} --no-auto-shell ${args}" "${script}"
   fi
   if [ ! -z "${BASH_VERSION}" ]
   then
      set +o posix
   fi
else
   shift    # get rid of --no-auto-shell
fi


#
# Main script to follow, runs now either in zsh or bash
#
####

MULLE_EXECUTABLE_VERSION="0.26.0"


usage()
{
   [ $# -ne 0 ] && log_error "$1"

   cat <<EOF >&2
Usage:
   ${MULLE_USAGE_NAME} [flags]

   Create the _Dependencies.cmake and _Libraries.cmake files from the
   information contained in the subtree.

   ${MULLE_USAGE_NAME} has to run in a mulle-sde environment. You can run it
   with \`mulle-sde run ${MULLE_USAGE_NAME}\`.

   Marks used:
     cmake-all-load           : library that need all symbols (ObjC)
     cmake-add                : add to the list of libraries to link
     cmake-dependency         : inherit foreign DependenciesAndLibraries.cmake
     cmake-inherit            : inherit anything from foreign library
     cmake-intermediate-link  : prefix container name with STARTUP_
     cmake-loader             : inherit foreign objc-loader.h
     require                  : combines require-link and require-header
     require-header           : the header must exist
     require-link             : the library must exist

Flags:
      --serial                : serial operation
      --stdout                : emit to stdout (implies --serial)

Environment:
   MULLE_SOURCETREE_TO_CMAKE_DEPENDENCIES_FILE : the dependencies output file
   MULLE_SOURCETREE_TO_CMAKE_LIBRARIES_FILE    : the libraries output file
   MULLE_SOURCETREE_CMAKE_SEARCHPATH_ENABLED   : if cmake-searchpath is used

EOF
   exit 1
}


# https://cmake.org/Wiki/CMake_Checking_Platform
r_uname_to_cmake()
{
   log_entry "r_uname_to_cmake" "$@"

   local uname="$1"

   local systemname

   case "${uname}" in
      "")
         fail "uname is empty"
      ;;

      'freebsd')
         systemname="FreeBSD"
      ;;

      'mingw')
         systemname="Windows"
      ;;

      *)
         r_uppercase "${uname:0:1}"
         systemname="${RVAL}${uname:1}"
      ;;
   esac

   RVAL="\${CMAKE_SYSTEM_NAME} MATCHES \"${systemname}\""
}


r_create_exclude_only_if()
{
   log_entry "r_create_exclude_only_if" "$@"

   local excludes="$1"
   local onlys="$2"

   IFS="${DEFAULT_IFS}"; shell_enable_glob

   if [ ! -z "${onlys}" ]
   then
      RVAL="if( ${onlys})"
      return
   fi

   if [ ! -z "${excludes}" ]
   then
      case "${excludes}" in
         *" OR "*)
            RVAL="if( NOT (${excludes}))"
            return
         ;;

         *)
            RVAL="if( NOT ${excludes})"
            return
         ;;
      esac
   fi

   RVAL=""
}


#
# key is "platform" usually
#
r_osexclude_configuration_to_cmake_if()
{
   log_entry "r_osexclude_configuration_to_cmake_if" "$@"

   local marks="$1"; shift

   local excludes
   local onlys
   local mark

   local length
   local len1
   local len2

   while [ $# -ne 0 ]
   do
      key="$1"
      shift

      length="${#key}"
      len1=$((length + 6))
      len2=$((length + 4))

      shell_disable_glob ; IFS=","
      for mark in ${marks}
      do
         IFS="${DEFAULT_IFS}"; shell_enable_glob

         case "${mark}" in
            only-${key}-*)
               r_uname_to_cmake "${mark:${len1}}"
               case " OR ${onlys} OR " in
                  *" OR ${RVAL} OR "*)
                  ;;

                  *)
                     r_concat "${onlys}" "${RVAL}" " OR "
                     onlys="${RVAL}"
                  ;;
               esac
            ;;

            no-${key}-*)
               r_uname_to_cmake "${mark:${len2}}"
               case " OR ${excludes} OR " in
                  *" OR ${RVAL} OR "*)
                  ;;

                  *)
                     r_concat "${excludes}" "${RVAL}" " OR "
                     excludes="${RVAL}"
                  ;;
               esac
            ;;
         esac
      done
   done

   r_create_exclude_only_if "${excludes}" "${onlys}"
}


# CMAKE must have global variable set for
#
#   _TMP_${identifier}_ROOT}  -> ${DEPENDENCY_DIR}/include
#
#   _TMP_${identifier}_NAME}  -> "MulleXYFoundation" if quoted_names is empty
#
_emit_dependencies_loader_cmake_code()
{
   log_entry "_emit_dependencies_loader_cmake_code" "$@"

   local address="$1"
   local identifier="$2"
   local quoted_names="$3"
   local marks="$4"
   local indent="$5"

   if [ -z "${quoted_names}" ]
   then
      quoted_names="IN LISTS _TMP_${identifier}_NAME"
   fi

   local headerdir_name

   headerdir_name="include"
   case ",${marks}," in
      *',only-framework,'*)
         headerdir_name="Headers"
      ;;
   esac

   local emit_objc_loader

   #
   # all-load is a bad obj-c differentiator
   #
   emit_objc_loader='NO'
   case ",${marks}," in
      *,no-all-load,*)
         emit_objc_loader='YES'
         case ",${marks}," in
            *,no-cmake-loader,*)
               emit_objc_loader='NO'
            ;;
         esac
      ;;
   esac

   case ",${marks}," in
      *,no-all-load,*|*,no-cmake-loader,*)
         emit_objc_loader='YES'
      ;;
   esac

   if [ "${OPTION_CMAKE_SEARCHPATH_ENABLED}" = 'YES' ]
   then
      case ",${marks}," in
         *,no-cmake-searchpath,*)
         ;;

         *)
            case ",${marks}," in
               *',only-framework,'*)
                  cat <<EOF
${indent}      #
${indent}      # Append header directory to user search path.
${indent}      # Disable with: \`mulle-sourcetree mark ${address} no-cmake-searchpath\`
${indent}      #
${indent}      set( _TMP_${identifier}_DIR "\${_TMP_${identifier}_ROOT}/${headerdir_name}")
${indent}      if( IS_DIRECTORY "\${_TMP_${identifier}_DIR}")
${indent}         set( INHERITED_INCLUDE_DIRS
${indent}            \${INHERITED_INCLUDE_DIRS}
${indent}            "\${_TMP_${identifier}_DIR}"
${indent}            CACHE INTERNAL "need to cache this"
${indent}         )
${indent}      else()
${indent}         message( STATUS "\${_TMP_${identifier}_DIR} not found")
${indent}      endif()
EOF
               ;;

               *)
                  cat <<EOF
${indent}      #
${indent}      # Append header directory to user search path.
${indent}      # Disable with: \`mulle-sourcetree mark ${address} no-cmake-searchpath\`
${indent}      #
${indent}      foreach( _TMP_${identifier}_NAME ${quoted_names})
${indent}         set( _TMP_${identifier}_DIR "\${_TMP_${identifier}_ROOT}/${headerdir_name}/\${_TMP_${identifier}_NAME}")
${indent}         if( IS_DIRECTORY "\${_TMP_${identifier}_DIR}")
${indent}            set( INHERITED_INCLUDE_DIRS
${indent}               \${INHERITED_INCLUDE_DIRS}
${indent}               "\${_TMP_${identifier}_DIR}"
${indent}               CACHE INTERNAL "need to cache this"
${indent}            )
${indent}            break()
${indent}         else()
${indent}            message( STATUS "\${_TMP_${identifier}_DIR} not found")
${indent}         endif()
${indent}      endforeach()
EOF
               ;;
            esac
         ;;
      esac
   fi

   case ",${marks}," in
      *,no-cmake-dependency,*)
      ;;

      *)
         case ",${marks}," in
            *',only-framework,'*)
               cat <<EOF
${indent}      #
${indent}      # Search for "DependenciesAndLibraries.cmake" to include.
${indent}      # Disable with: \`mulle-sourcetree mark ${address} no-cmake-dependency\`
${indent}      #
${indent}      set( _TMP_${identifier}_DIR "\${_TMP_${identifier}_ROOT}/${headerdir_name}/cmake")
${indent}      # use explicit path to avoid "surprises"
${indent}      if( EXISTS "\${_TMP_${identifier}_DIR}/DependenciesAndLibraries.cmake")
${indent}         unset( ${identifier}_DEFINITIONS)
${indent}         list( INSERT CMAKE_MODULE_PATH 0 "\${_TMP_${identifier}_DIR}")
${indent}         # we only want top level INHERIT_OBJC_LOADERS, so disable them
${indent}         if( NOT NO_INHERIT_OBJC_LOADERS)
${indent}            set( NO_INHERIT_OBJC_LOADERS OFF)
${indent}         endif()
${indent}         list( APPEND _TMP_INHERIT_OBJC_LOADERS \${NO_INHERIT_OBJC_LOADERS})
${indent}         set( NO_INHERIT_OBJC_LOADERS ON)
${indent}         #
${indent}         include( "\${_TMP_${identifier}_DIR}/DependenciesAndLibraries.cmake")
${indent}         #
${indent}         list( GET _TMP_INHERIT_OBJC_LOADERS -1 NO_INHERIT_OBJC_LOADERS)
${indent}         list( REMOVE_AT _TMP_INHERIT_OBJC_LOADERS -1)
${indent}         #
${indent}         list( REMOVE_ITEM CMAKE_MODULE_PATH "\${_TMP_${identifier}_DIR}")
${indent}         set( INHERITED_DEFINITIONS
${indent}            \${INHERITED_DEFINITIONS}
${indent}            \${${identifier}_DEFINITIONS}
${indent}            CACHE INTERNAL "need to cache this"
${indent}         )
${indent}      else()
${indent}         message( STATUS "\${_TMP_${identifier}_DIR}/DependenciesAndLibraries.cmake not found")
${indent}      endif()
EOF
            ;;

            *)
               cat <<EOF
${indent}      #
${indent}      # Search for "DependenciesAndLibraries.cmake" to include.
${indent}      # Disable with: \`mulle-sourcetree mark ${address} no-cmake-dependency\`
${indent}      #
${indent}      foreach( _TMP_${identifier}_NAME ${quoted_names})
${indent}         set( _TMP_${identifier}_DIR "\${_TMP_${identifier}_ROOT}/${headerdir_name}/\${_TMP_${identifier}_NAME}/cmake")
${indent}         # use explicit path to avoid "surprises"
${indent}         if( EXISTS "\${_TMP_${identifier}_DIR}/DependenciesAndLibraries.cmake")
${indent}            unset( ${identifier}_DEFINITIONS)
${indent}            list( INSERT CMAKE_MODULE_PATH 0 "\${_TMP_${identifier}_DIR}")
EOF


               if [ "${emit_objc_loader}" = 'YES' ]
               then
                  cat <<EOF
${indent}            # we only want top level INHERIT_OBJC_LOADERS, so disable them
${indent}            if( NOT NO_INHERIT_OBJC_LOADERS)
${indent}               set( NO_INHERIT_OBJC_LOADERS OFF)
${indent}            endif()
${indent}            list( APPEND _TMP_INHERIT_OBJC_LOADERS \${NO_INHERIT_OBJC_LOADERS})
${indent}            set( NO_INHERIT_OBJC_LOADERS ON)
EOF
               fi
               cat <<EOF
${indent}            #
${indent}            include( "\${_TMP_${identifier}_DIR}/DependenciesAndLibraries.cmake")
${indent}            #
EOF
               if [ "${emit_objc_loader}" = 'YES' ]
               then
                  cat <<EOF
${indent}            list( GET _TMP_INHERIT_OBJC_LOADERS -1 NO_INHERIT_OBJC_LOADERS)
${indent}            list( REMOVE_AT _TMP_INHERIT_OBJC_LOADERS -1)
EOF
               fi
               cat <<EOF
${indent}            #
${indent}            list( REMOVE_ITEM CMAKE_MODULE_PATH "\${_TMP_${identifier}_DIR}")
${indent}            set( INHERITED_DEFINITIONS
${indent}               \${INHERITED_DEFINITIONS}
${indent}               \${${identifier}_DEFINITIONS}
${indent}               CACHE INTERNAL "need to cache this"
${indent}            )
${indent}            break()
${indent}         else()
${indent}            message( STATUS "\${_TMP_${identifier}_DIR}/DependenciesAndLibraries.cmake not found")
${indent}         endif()
${indent}      endforeach()
EOF
            ;;
         esac
      ;;
   esac

   #
   # for objective-c we find objc-loader.inc in the public include files
   #
   case ",${marks}," in
      *,no-all-load,*|*,no-cmake-loader,*)
      ;;

      *)
         case ",${marks}," in
            *',only-framework,'*)
               cat <<EOF
${indent}      #
${indent}      # Search for "MulleObjCLoader+<name>.h" in include directory.
${indent}      # Disable with: \`mulle-sourcetree mark ${address} no-cmake-loader\`
${indent}      #
${indent}      if( NOT NO_INHERIT_OBJC_LOADERS)
${indent}         get_filename_component( _TMP_${identifier}_NAME "\${_TMP_${identifier}_ROOT}" NAME_WE)
${indent}         set( _TMP_${identifier}_FILE "\${_TMP_${identifier}_ROOT}/Headers/MulleObjCLoader+\${_TMP_${identifier}_NAME}.h")
${indent}         if( EXISTS "\${_TMP_${identifier}_FILE}")
${indent}            set( INHERITED_OBJC_LOADERS
${indent}               \${INHERITED_OBJC_LOADERS}
${indent}               \${_TMP_${identifier}_FILE}
${indent}               CACHE INTERNAL "need to cache this"
${indent}            )
${indent}         endif()
${indent}      endif()
EOF
            ;;

            *)
               cat <<EOF
${indent}      #
${indent}      # Search for "MulleObjCLoader+<name>.h" in include directory.
${indent}      # Disable with: \`mulle-sourcetree mark ${address} no-cmake-loader\`
${indent}      #
${indent}      if( NOT NO_INHERIT_OBJC_LOADERS)
${indent}         foreach( _TMP_${identifier}_NAME ${quoted_names})
${indent}            set( _TMP_${identifier}_FILE "\${_TMP_${identifier}_ROOT}/include/\${_TMP_${identifier}_NAME}/MulleObjCLoader+\${_TMP_${identifier}_NAME}.h")
${indent}            if( EXISTS "\${_TMP_${identifier}_FILE}")
${indent}               set( INHERITED_OBJC_LOADERS
${indent}                  \${INHERITED_OBJC_LOADERS}
${indent}                  \${_TMP_${identifier}_FILE}
${indent}                  CACHE INTERNAL "need to cache this"
${indent}               )
${indent}               break()
${indent}            endif()
${indent}         endforeach()
${indent}      endif()
EOF
            ;;
         esac
      ;;
   esac
}


#
# no-require-link and no-require, means that find_library may fail and it's OK
# no-cmake-add is hack for subprojects, all the "logic" of a dependency
# runs but the dependency is not actually added to the linkables
# no-cmake-loader is sort of the inverse, the "loader" part is removed, but
# the library is actually linked
#
_emit_cmake_find_library()
{
   log_entry "_emit_cmake_find_library" "$@"

   local preference="$1"; shift
   local findoptions="$1"; shift

   local names="$1"
   local address="$2"
   local identifier="$3"
   local containername="$4"
   local marks="$5"
   local header="$6"
   local indent="$7"

   local Release_libraries # sic
   local Debug_libraries   # sic
   local i
   local quoted_names
   local type
   local name
   local library_key
   local types

   IFS=","; shell_disable_glob
   for i in ${names}
   do
      # Split Release:curl into Release (type) and curl (name)
      name=""
      type=""

      case "${i}" in
         *:*)
            name="${i#*:}"
            type="${i%%:*}"
         ;;
      esac

      name="${name:-$i}"
      type="${type:-Release}"

      r_add_unique_line "${types}" "${type}"
      types="${RVAL}"

      r_concat "${quoted_names}" "\"${name}\""
      quoted_names="${RVAL}"

      # get appropriate libraries into local variable libraries
      library_key="${type}_libraries"
      if [ ! -z "${ZSH_VERSION}" ]
      then
         libraries="${(P)library_key}"
      else
         libraries="${!library_key}"
      fi

      # frameworks only have one name or ?
      case ",${marks}," in
         *',only-framework,'*)
            r_concat "${libraries}" "${name}"
            libraries="${RVAL}"

            printf -v "${library_key}" "%s" "${libraries}"
            break
         ;;
      esac

      #
      # /usr/local/lib is apparently NOT part of system path, and therefore
      # can not be easily excluded with NO_CMAKE_SYSTEM_PATH. Which is bad,
      # if we are searching for static first, but the test really wants the
      # dynamic local one
      #
      case ",${marks}," in
         *',no-dynamic-link,'*)
            case "${preference}" in
               'any'|'shared')
                  preference='static'
               ;;
            esac
         ;;

         *',no-static-link,'*)
            case "${preference}" in
               'any'|'static')
                  preference='shared'
               ;;
            esac
         ;;
      esac

      case "${preference}" in
         'static')
            r_concat "${libraries}" "\${CMAKE_STATIC_LIBRARY_PREFIX}${name}\${CMAKE_STATIC_LIBRARY_SUFFIX}"
            libraries="${RVAL}"
         ;;

         'shared')
            r_concat "${libraries}" "\${CMAKE_SHARED_LIBRARY_PREFIX}${name}\${CMAKE_SHARED_LIBRARY_SUFFIX}"
            libraries="${RVAL}"
         ;;
      esac

      # fallback to whatever linkage, if the preference wasn't overridden
      case ",${marks}," in
         *',no-dynamic-link,'*|*',no-static-link,'*)
         ;;

         *)
            r_concat "${libraries}" "${name}"
            libraries="${RVAL}"
         ;;
      esac

      printf -v "${library_key}" "%s" "${libraries}"
   done
   IFS="${DEFAULT_IFS}"; shell_disable_glob

   local failstring
   local failstatus
   local key

   key="${identifier}_LIBRARY"
   case ",${marks}," in
      *',only-framework,'*)
         key="${identifier}_FRAMEWORK"
      ;;
   esac

   case ",${marks}," in
      *',no-require-link,'*)
         failcomment="\
# Enable with: \`mulle-sourcetree mark ${address} require-link\`"
         failstatus="STATUS"
         failstring="${key} is missing but it is marked as \\\"no-require-link\\\""
      ;;

      *',no-require,'*)
         failcomment="\
# Enable with: \`mulle-sourcetree mark ${address} require\`"
         failstatus="STATUS"
         failstring="${key} is missing but it is marked as \\\"no-require\\\""
      ;;

      *)
         failcomment="\
# Disable with: \`mulle-sourcetree mark ${address} no-require-link\`"

         failstatus="FATAL_ERROR"
         failstring="${key} was not found"
      ;;
   esac


#
# this is getting unwieldy, should probably use a function
#
# Maybe need to use two find_library calls to first get things in
# DEPENDENCY_DIR and ADDICTION_DIR, which will be in
# CMAKE_LIBRARY_PATH and CMAKE_LIBRARY_PATH
#
# Seems to fix a problem when old libs are in /usr/local/lib
# TODO: maybenot use CMAKE_LIBRARY_PATH and CMAKE_FRAMEWORK_PATH then ?

      cat  <<EOF
${indent}if( NOT ${key})
EOF
   # if ir's just the default emit a simple line
   if [ "${types}" = "Release" ]
   then
      cat  <<EOF
${indent}   find_library( ${key} NAMES ${Release_libraries}${findoptions})
EOF
   else
      local clause
      #
      # we have multiple lines for build types, so we produce a more elaborate
      # find_library call sequence. But Release is always a fallback option!
      #
      shell_disable_glob
      for type in ${types}
      do
         if [ "${type}" != "Release" ]
         then
            library_key="${type}_libraries"

            if [ ! -z "${ZSH_VERSION}" ]
            then
               libraries="${(P)library_key}"
            else
               libraries="${!library_key}"
            fi

            cat  <<EOF
${indent}   if(${clause} "\${CMAKE_BUILD_TYPE}" STREQUAL "${type}")
${indent}      find_library( ${identifier}_LIBRARY NAMES ${libraries}${findoptions})
${indent}   endif()
EOF
            clause=" NOT ${key} AND"
         fi
      done
      shell_enable_glob

      # fallback Reelase
      cat  <<EOF
${indent}   if( NOT ${key})
${indent}      find_library( ${key} NAMES ${Release_libraries}${findoptions})
${indent}   endif()
EOF
   fi

      cat  <<EOF
${indent}   message( STATUS "${key} is \${${key}}")
${indent}   #
${indent}   # The order looks ascending, but due to the way this file is read
${indent}   # it ends up being descending, which is what we need.
${indent}   #
${indent}   if( ${key})
EOF
   case ",${marks}," in
      *',no-cmake-add,'*)
      ;;

      *)
         cat <<EOF
${indent}      #
${indent}      # Add ${key} to ${containername} list.
${indent}      # Disable with: \`mulle-sourcetree mark ${address} no-cmake-add\`
${indent}      #
${indent}      set( ${containername}
${indent}         \${${containername}}
${indent}         \${${key}}
${indent}         CACHE INTERNAL "need to cache this"
${indent}      )
EOF
      ;;
   esac

   case ",${marks}," in
      *',no-cmake-inherit,'*)
         cat <<EOF
${indent}      # intentionally left blank
EOF
      ;;

      *)
         case ",${marks}," in
            *',only-framework,'*)
               cat <<EOF
${indent}      #
${indent}      # Inherit information from dependency.
${indent}      # Disable with: \`mulle-sourcetree mark ${address} no-cmake-inherit\`
${indent}      #
${indent}      # temporarily expand CMAKE_MODULE_PATH
${indent}      set( _TMP_${identifier}_ROOT "\${${key}}")
${indent}      #
EOF
            ;;

            *)
               cat <<EOF
${indent}      #
${indent}      # Inherit information from dependency.
${indent}      # Encompasses: no-cmake-searchpath,no-cmake-dependency,no-cmake-loader
${indent}      # Disable with: \`mulle-sourcetree mark ${address} no-cmake-inherit\`
${indent}      #
${indent}      # temporarily expand CMAKE_MODULE_PATH
${indent}      get_filename_component( _TMP_${identifier}_ROOT "\${${key}}" DIRECTORY)
${indent}      get_filename_component( _TMP_${identifier}_ROOT "\${_TMP_${identifier}_ROOT}" DIRECTORY)
${indent}      #
EOF
            ;;
         esac

         _emit_dependencies_loader_cmake_code "${address}" \
                                              "${identifier}" \
                                              "${quoted_names}" \
                                              "${marks}" \
                                              "${indent}"
      ;;
   esac

# ${indent}         message( STATUS "_TMP_${identifier}_DIR is \${_TMP_${identifier}_DIR}")

   cat <<EOF
${indent}   else()
${indent}      ${failcomment}
${indent}      message( ${failstatus} "${failstring}")
${indent}   endif()
${indent}endif()
EOF
}


_emit_cmake_library()
{
   log_entry "_emit_cmake_library" "$@"

   _emit_cmake_find_library "any" "" "$@"
}


#
# dependencies will not be searched in the host system
#
_emit_cmake_dependency()
{
   log_entry "_emit_cmake_dependency" "$@"

   local marks="$5"
#   local header="$6"
   local indent="$7"

   local findoptions

   #
   # w/o NO_SYSTEM_ENVIRONMENT_PATH, cmake picks up libraries from
   # /usr/local/lib
   #
   findoptions=" NO_CMAKE_SYSTEM_PATH NO_SYSTEM_ENVIRONMENT_PATH"

   case ",${marks}," in
      *,no-cmake-suppress-system-path,*)
         findoptions=""
      ;;
   esac

# alternative
#   findoptions="
#${indent}      PATHS \${CMAKE_LIBRARY_PATH} \${CMAKE_FRAMEWORK_PATH}
#${indent}      NO_DEFAULT_PATH
#${indent}   )"

   _emit_cmake_find_library "static" "${findoptions}" "$@"
}


#
#
_emit_cmake_header_only()
{
   log_entry "_emit_cmake_header_only" "$@"

   local names="$1"
   local address="$2"
   local identifier="$3"
   local containername="$4"
   local marks="$5"
   local header="$6"
   local indent="$7"

   local headers
   local headername
   local i

   if [ ! -z "${header}" ]
   then
      headers="${header}"
      r_basename "${header}"
      headername="${RVAL}"
   fi

   IFS=","; shell_disable_glob
   for i in ${names}
   do
      if [ -z "${header}" ]
      then
         r_concat "${headers}" "${i}/${headername}"
      else
         r_concat "${headers}" "${i}/${i}.h"
      fi
      headers="${RVAL}"
   done

   if [ -z "${header}" ]
   then
      r_concat "${headers}" "${i}.h"
   fi

   IFS="${DEFAULT_IFS}"; shell_enable_glob

   local key

   key="${identifier}_HEADER"

   case ",${marks}," in
      *',no-require-header,'*)
         failcomment="\
# Enable with: \`mulle-sourcetree mark ${address} require-header\`"
         failstatus="STATUS"
         failstring="${key} is missing but it is marked as \\\"no-require-header\\\""
      ;;

      *',no-require,'*)
         failcomment="\
# Enable with: \`mulle-sourcetree mark ${address} require\`"
         failstatus="STATUS"
         failstring="${key} is missing but it is marked as \\\"no-require\\\""
      ;;

      *)
         failcomment="\
# Disable with: \`mulle-sourcetree mark ${address} no-require\`"
         failstatus="FATAL_ERROR"
         failstring="${key} was not found"
      ;;
   esac

   #
   # The idea here is that cmake should generate the proper -I option.
   # The header find_file might be useful to copy it somewhere. Otherwise
   # probably useless. (could leave it out)
   #
   cat <<EOF
${indent}if( NOT ${key})
${indent}   find_file( ${key} NAMES ${headers})
${indent}   message( STATUS "${key} is \${${key}}")

EOF

   case ",${marks}," in
      *',no-cmake-add,'*)
      ;;

      *)
         cat <<EOF
${indent}   #
${indent}   # Add ${key} to ${containername} list.
${indent}   # Disable with: \`mulle-sourcetree mark ${address} no-cmake-add\`
${indent}   #
${indent}   set( ${containername}
${indent}      \${${key}}
${indent}      \${${containername}}
${indent}      CACHE INTERNAL "need to cache this"
${indent}   )
EOF
      ;;
   esac

   cat <<EOF
${indent}   if( ${key})
EOF


   case ",${marks}," in
      *',no-cmake-inherit,'*)
         cat <<EOF
${indent}      # intentionally left blank
EOF
      ;;

      *)
         cat <<EOF
${indent}      #
${indent}      # Inherit ObjC loader and link dependency info.
${indent}      # Disable with: \`mulle-sourcetree mark ${address} no-cmake-inherit\`
${indent}      #
${indent}      get_filename_component( _TMP_${identifier}_ROOT "\${${key}}" DIRECTORY)
${indent}      get_filename_component( _TMP_${identifier}_NAME "\${_TMP_${identifier}_ROOT}" NAME)
${indent}      get_filename_component( _TMP_${identifier}_ROOT "\${_TMP_${identifier}_ROOT}" DIRECTORY)
${indent}      get_filename_component( _TMP_${identifier}_ROOT "\${_TMP_${identifier}_ROOT}" DIRECTORY)
EOF

         #
         # this search for a header is useful for subprojects
         # MulleObjCOSFoundation
         #
          _emit_dependencies_loader_cmake_code "${address}" \
                                               "${identifier}" \
                                               "" \
                                               "${marks}" \
                                               "${indent}"
      ;;
   esac

   cat <<EOF
${indent}   else()
${indent}      ${failcomment}
${indent}      message( ${failstatus} "${failstring}")
${indent}   endif()
${indent}endif()

EOF
}


emit_cmake_dependency()
{
   log_entry "emit_cmake_dependency" "$@"

   local emitter="$1"
   local containername="$2"
   local uuid="$3"
   local address="$4"
   local marks="$5"
   local aliases="$6"
   local header="$7"
   local disabler="$8"

   [ -z "${emitter}" ] && internal_fail "emitter is empty"
   [ -z "${uuid}" ] && internal_fail "address is empty"
   [ -z "${address}" ] && internal_fail "address is empty"
   [ -z "${containername}" ] && internal_fail "containername is empty"

   local indent
   local ifstatement
   local endifstatement
   local actualcontainername

   #
   # ALL_LOAD_ is the default for Objective-C static libraries and is the
   # default. "C" libraries are marked with no-all-load and will remove the
   # prefix later
   #
   actualcontainername="ALL_LOAD_${containername}"

   if [ ! -z "${marks}" ]
   then
      r_osexclude_configuration_to_cmake_if "${marks}" "platform" "cmake-platform"
      ifstatement="${RVAL}"
      if [ ! -z "${ifstatement}" ]
      then
         indent="   "
      fi

      case ",${marks}," in
         *,no-all-load,*|*,no-cmake-all-load,*)
            actualcontainername="${containername}"
         ;;
      esac

      case ",${marks}," in
         *,no-intermediate-link,*|*,no-cmake-intermediate-link,*)
            actualcontainername="STARTUP_${actualcontainername}"
         ;;
      esac
   fi

   local identifiername
   local identifier
   local filename
   local names

   names="${aliases}"
   if [ -z "${names}" ]
   then
      r_basename "${address%#*}"
      names="${RVAL}"
   fi

   # first of the names determines the identifier
   r_basename "${names%%,*}"
   identifiername="${RVAL#*:}"

   if [ -z "${MULLE_CASE_SH}" ]
   then
      # shellcheck source=mulle-case.sh
      . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-case.sh" || return 1
   fi

   r_tweaked_de_camel_case "${identifiername}"
   r_identifier "${RVAL}"
   r_uppercase "${RVAL}"
   identifier="${RVAL}"

   [ -z "${identifier}" ] && \
      fail "Identifier derived from \"${names}\" is empty"


   if [ -z "${header}" ]
   then
      local name

      r_basename "${address%#*}"
      name="${RVAL}"
      header="${name}.h"
   fi

   cat <<EOF
#
# Generated from sourcetree: ${uuid};${address};${marks};${aliases}
# Disable with : \`mulle-sourcetree mark ${address} ${disabler}\`
# Disable for this platform: \`mulle-sourcetree mark ${address} no-cmake-platform-\${MULLE_UNAME}\`
#
EOF

   if [ ! -z "${ifstatement}" ]
   then
      printf "%s\n" "${ifstatement}"
   fi

   "${emitter}" "${names}" \
                "${address}" \
                "${identifier}" \
                "${actualcontainername}" \
                "${marks}" \
                "${header}" \
                "${indent}"

   if [ ! -z "${ifstatement}" ]
   then
      echo "endif()"
   fi

   echo
   echo
}


emit_cmake_dependencies()
{
   log_entry "emit_cmake_dependencies" "$@"

   local emitter="$1"
   local containername="$2"
   local dependencies="$3"
   local disabler="$4"

   local dependency

   shell_disable_glob; IFS=$'\n'
   for dependency in ${dependencies}
   do
      IFS="${DEFAULT_IFS}"; shell_enable_glob

      local address
      local marks
      local aliases

      log_debug "read \"${dependency}\""

      IFS=";" read uuid address marks aliases include <<< "${dependency}"

      log_debug "uuid:    ${uuid}"
      log_debug "address: ${address}"
      log_debug "marks:   ${marks}"
      log_debug "aliases: ${aliases}"
      log_debug "include: ${include}"

      if [ ! -z "${address}" ]
      then
         log_verbose "Emit cmake statements for ${uuid} ${C_MAGENTA}${C_BOLD}${address}"
         emit_cmake_dependency "${emitter}" \
                               "${containername}" \
                               "${uuid}" \
                               "${address}" \
                               "${marks}" \
                               "${aliases}" \
                               "${include}" \
                               "${disabler}"
      fi
   done
   IFS="${DEFAULT_IFS}"; shell_enable_glob
}


emit_dependency_or_subproject()
{
   log_entry "emit_dependency_or_subproject" "$@"

   local dependency
   local header
   local qualifier

   qualifier="\
MATCHES dependency AND \
MATCHES header AND \
( \
   MATCHES no-link OR \
   MATCHES no-actual-link \
)"

   header="`rexekutor "${MULLE_SOURCETREE}" \
                           --virtual-root \
                           ${MULLE_TECHNICAL_FLAGS} \
                        list \
                              --no-bequeath \
                              --format '%_;%a;%m;%i={aliases,,};%i={include,,}\n' \
                              --qualifier "${qualifier}" \
                              --output-format raw \
                              --no-output-header`" || return 1
   emit_cmake_dependencies "_emit_cmake_header_only" \
                           "HEADER_ONLY_LIBRARIES" \
                           "${header}" \
                           "no-header"

   qualifier="\
MATCHES dependency AND \
MATCHES link AND \
MATCHES actual-link AND \
NOT MATCHES only-framework"

   dependency="`rexekutor "${MULLE_SOURCETREE}" \
                              --virtual-root \
                              ${MULLE_TECHNICAL_FLAGS} \
                           list \
                              --no-bequeath \
                              --format '%_;%a;%m;%i={aliases,,};%i={include,,}\n' \
                              --qualifier "${qualifier}" \
                              --output-format raw \
                              --no-output-header`" || return 1

   emit_cmake_dependencies "_emit_cmake_dependency" \
                           "DEPENDENCY_LIBRARIES" \
                           "${dependency}" \
                           "no-link"

   qualifier="\
MATCHES dependency AND \
MATCHES link AND \
MATCHES actual-link AND \
MATCHES only-framework"

   dependency="`rexekutor "${MULLE_SOURCETREE}" \
                              --virtual-root \
                              ${MULLE_TECHNICAL_FLAGS} \
                           list \
                              --no-bequeath \
                              --format '%_;%a;%m;%i={aliases,,};%i={include,,}\n' \
                              --qualifier "${qualifier}" \
                              --output-format raw \
                              --no-output-header`" || return 1

   emit_cmake_dependencies "_emit_cmake_dependency" \
                           "DEPENDENCY_FRAMEWORKS" \
                           "${dependency}" \
                           "no-link"
}


emit_library()
{
   log_entry "emit_library" "$@"

   local library
   local header

   local qualifier

   qualifier="\
MATCHES header AND \
MATCHES no-dependency AND \
MATCHES no-fs AND \
( \
   MATCHES no-link OR \
   MATCHES no-actual-link \
)"

   header="`exekutor "${MULLE_SOURCETREE}" \
                           --virtual-root \
                           ${MULLE_TECHNICAL_FLAGS} \
                        list \
                           --no-bequeath \
                           --format '%_;%a;%m;%i={aliases,,};%i={include,,}\n' \
                           --qualifier "${qualifier}" \
                           --output-format raw \
                           --no-output-header`" || return 1

   emit_cmake_dependencies "_emit_cmake_header_only" \
                           "HEADER_ONLY_LIBRARIES" \
                           "${header}"

   qualifier="\
MATCHES no-dependency AND \
MATCHES no-fs AND \
MATCHES link AND \
MATCHES actual-link AND \
NOT MATCHES only-framework"

   library="`exekutor "${MULLE_SOURCETREE}" \
                           --virtual-root \
                           ${MULLE_TECHNICAL_FLAGS} \
                        list \
                           --no-bequeath \
                           --format '%_;%a;%m;%i={aliases,,};%i={include,,}\n' \
                           --qualifier "${qualifier}" \
                           --output-format raw \
                           --no-output-header`" || return 1

   emit_cmake_dependencies "_emit_cmake_library" \
                           "OS_SPECIFIC_LIBRARIES" \
                           "${library}"

   qualifier="\
MATCHES no-dependency AND \
MATCHES no-fs AND \
MATCHES link AND \
MATCHES actual-link AND \
MATCHES only-framework"

   library="`exekutor "${MULLE_SOURCETREE}" \
                           --virtual-root \
                           ${MULLE_TECHNICAL_FLAGS} \
                        list \
                           --no-bequeath \
                           --format '%_;%a;%m;%i={aliases,,};%i={include,,}\n' \
                           --qualifier "${qualifier}" \
                           --output-format raw \
                           --no-output-header`" || return 1

   emit_cmake_dependencies "_emit_cmake_library" \
                           "OS_SPECIFIC_FRAMEWORKS" \
                           "${library}"
}


output_file()
{
   log_entry "output_file" "$@"

   local filename="$1"
   local text="$2"
   local title="$3"

   if [ "${filename}" = "-" ]
   then
      log_info "${title}"
      rexekutor printf "%s\n" "${text}"
      return $?
   fi

   log_verbose "mulle-sourcetree-to-cmake writes ${C_RESET_BOLD}${filename}"

   r_dirname "${filename}"
   mkdir_if_missing "${RVAL}"

   if [ -f "${filename}" ] 
   then 
      exekutor chmod a+w "${filename}" || _fatal "Can't unprotect \"${filename}\"" 
   fi
   r_mkdir_parent_if_missing "${filename}"
   if redirect_exekutor "${filename}" printf "%s\n" "${text}"
   then
      exekutor chmod a-w "${filename}"
      return 0
   fi
   log_error "Failed to write \"${filename}\""
   return 1
}



MULLE_SOURCETREE_TO_CMAKE_BLURB="\
# This file will be regenerated by \`mulle-sourcetree-to-cmake\` via
# \`mulle-sde reflect\` and any edits will be lost.
#"


#
# collect library and dependency, with routines in
# mulle-sde-updatesupport.sh for reuse with stuff other than cmake
#
write_libraries_file()
{
   log_entry "write_libraries_file" "$@"

   local text_lib

   case "${MULLE_SOURCETREE_TO_CMAKE_DEPENDENCIES_FILE}" in
      NONE)
         MULLE_SOURCETREE_TO_CMAKE_LIBRARIES_FILE=""

         text_lib="# library generation turned off by MULLE_SOURCETREE_TO_CMAKE_LIBRARIES_FILE"
      ;;

      DISABLE*)
         return
      ;;

      *)
         #
         text_lib="`emit_library`" || return 1
         if [ -z "${text_lib}" ]
         then
            text_lib="# there are no libraries in the sourcetree"
         fi
      ;;
   esac
   MULLE_SOURCETREE_TO_CMAKE_LIBRARIES_FILE="${MULLE_SOURCETREE_TO_CMAKE_LIBRARIES_FILE:-cmake/reflect/_Libraries.cmake}"

   text_lib="${MULLE_SOURCETREE_TO_CMAKE_BLURB}
# This file will be included by cmake/share/Files.cmake
#
# Disable generation of this file with:
#
# mulle-sde environment set MULLE_SOURCETREE_TO_CMAKE_LIBRARIES_FILE DISABLE
#
if( MULLE_TRACE_INCLUDE)
   message( STATUS \"# Include \\\"\${CMAKE_CURRENT_LIST_FILE}\\\"\" )
endif()

${text_lib}"

  output_file "${MULLE_SOURCETREE_TO_CMAKE_LIBRARIES_FILE}" \
              "${text_lib}" \
              "_Libraries.cmake"
}


write_dependencies_file()
{
   log_entry "write_dependencies_file" "$@"

   local text_dep

   case "${MULLE_SOURCETREE_TO_CMAKE_DEPENDENCIES_FILE}" in
      NONE)
         MULLE_SOURCETREE_TO_CMAKE_DEPENDENCIES_FILE=""
         text_dep="# dependency generation turned off by MULLE_SOURCETREE_TO_CMAKE_DEPENDENCIES_FILE"
      ;;

      DISABLE)
         return
      ;;

      *)
         text_dep="`emit_dependency_or_subproject`"  || return 1
         if [ -z "${text_dep}" ]
         then
            text_dep="# there are no applicable dependencies in the sourcetree"
         fi
      ;;
   esac

   MULLE_SOURCETREE_TO_CMAKE_DEPENDENCIES_FILE="${MULLE_SOURCETREE_TO_CMAKE_DEPENDENCIES_FILE:-cmake/reflect/_Dependencies.cmake}"

   text_dep="${MULLE_SOURCETREE_TO_CMAKE_BLURB}
# This file will be included by cmake/share/Files.cmake
#
# Disable generation of this file with:
#
# mulle-sde environment set MULLE_SOURCETREE_TO_CMAKE_DEPENDENCIES_FILE DISABLE
#
if( MULLE_TRACE_INCLUDE)
   message( STATUS \"# Include \\\"\${CMAKE_CURRENT_LIST_FILE}\\\"\" )
endif()

${text_dep}"

   output_file "${MULLE_SOURCETREE_TO_CMAKE_DEPENDENCIES_FILE}" \
               "${text_dep}" \
               "_Dependencies.cmake"
}


main()
{
   log_entry "main" "$@"

   local MULLE_TRACE
   local MULLE_FLAG_DONT_DEFER='NO'
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_FOLLOW_SYMLINKS='YES'
   local MULLE_FLAG_LOG_CACHE='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_TRACE_PATHS_FLIP_X='NO'
   local MULLE_TRACE_POSTPONE='NO'
   local MULLE_TRACE_RESOLVER_FLIP_X='NO'
   local MULLE_TRACE_SETTINGS_FLIP_X='NO'

   local OPTION_PARALLEL='YES'
   local OPTION_CMAKE_SEARCHPATH_ENABLED="${MULLE_SOURCETREE_CMAKE_SEARCHPATH_ENABLED:-NO}"

   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h*|--help|help)
            usage
         ;;

         -p|--projectname)
            [ "$#" -eq 1 ] && usage "Missing argument to \"$1\""
            shift

            PROJECT_NAME="$1"
         ;;

         --serial|--no-parallel)
            OPTION_PARALLEL='NO'
         ;;

         --stdout)
            MULLE_SOURCETREE_TO_CMAKE_DEPENDENCIES_FILE="-"
            MULLE_SOURCETREE_TO_CMAKE_LIBRARIES_FILE="-"
            OPTION_PARALLEL='NO'
         ;;

         --enable-cmake-searchpath)
            OPTION_CMAKE_SEARCHPATH_ENABLED="YES"
         ;;

         --no-enable-cmake-searchpath)
            OPTION_CMAKE_SEARCHPATH_ENABLED="NO"
         ;;

         --no-dependencies)
            MULLE_SOURCETREE_TO_CMAKE_DEPENDENCIES_FILE="NONE"
         ;;

         --no-libraries)
            MULLE_SOURCETREE_TO_CMAKE_LIBRARIES_FILE="NONE"
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            return 0
         ;;

         -*)
            usage "Unknown option \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   MULLE_SDE="${MULLE_SDE:-`command -v mulle-sde`}"
   [ -z "${MULLE_SDE}" ] && fail "mulle-sde not in PATH"

   MULLE_SOURCETREE="${MULLE_SOURCETREE:-`command -v mulle-sourcetree`}"
   [ -z "${MULLE_SOURCETREE}" ] && fail "mulle-sourcetree not in PATH"

   options_setup_trace "${MULLE_TRACE}" && set -x

   if [ "${OPTION_PARALLEL}" = 'YES' ]
   then
      write_dependencies_file "${categorized_files}" &
      write_libraries_file "${categorized_files}" &

      log_fluff "waiting..."
      wait
      log_fluff 'done!'
   else
      write_dependencies_file "${categorized_files}"
      write_libraries_file "${categorized_files}"
   fi
}


_fatal()
{
   echo "$0 fatal error: $*" >&2
   exit 1
}

_init()
{
   # mingw stuff
   case "$PATH" in
      '\\'*)
         PATH="${PATH//\\/\/}"
      ;;
   esac

   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env "libexec-dir" 2> /dev/null`"
      [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ] && \
         _fatal "mulle-bashfunctions-env not installed"
   fi

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

   call_main "${MULLE_SOURCETREE_TO_CMAKE_FLAGS}" "$@"
}

MULLE_EXECUTABLE="${MULLE_EXECUTABLE:-${BASH_SOURCE[0]:-${(%):-%x}}}"

_init "$@"

