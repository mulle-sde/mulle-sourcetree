#! /usr/bin/env bash

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"


run_test_1()
{
   local nodeline

   nodeline="address;nodetype;marks;uuid;url;branch;tag;fetchoptions;userinfo"

   local name

   local _branch
   local _address
   local _fetchoptions
   local _nodetype
   local _marks
   local _raw_userinfo
   local _tag
   local _url
   local _userinfo
   local _uuid

   nodeline_parse "${nodeline}"

   [ "${_address}"      = "address" ]      || fail "wrong address \"${_address}\""
   [ "${_url}"          = "url" ]          || fail "wrong name \"${_url}\""
   [ "${_branch}"       = "branch" ]       || fail "wrong branch \"${_branch}\""
   [ "${_tag}"          = "tag" ]          || fail "wrong tag \"${_tag}\""
   [ "${_nodetype}"     = "nodetype" ]     || fail "wrong nodetype \"${_nodetype}\""
   [ "${_marks}"        = "marks" ]        || fail "wrong marks \"${_marks}\""
   [ "${_fetchoptions}" = "fetchoptions" ] || fail "wrong nodetype \"${_fetchoptions}\""
   [ "${_userinfo}"     = "userinfo" ]     || fail "wrong userinfo \"${_userinfo}\""
   [ "${_uuid}"         = "uuid" ]         || fail "wrong uuid \"${_uuid}\""

   local printed

   printed="`node_to_nodeline "${nodeline}"`"

   [ "${nodeline}" = "${printed}" ]     || \
      fail "printed nodeline differs \"${printed}\" vs. \"${nodeline}\""
}


run_test_2()
{
   local name

   local _branch
   local _address
   local _fetchoptions
   local _nodetype
   local _marks
   local _raw_userinfo
   local _tag
   local _url
   local _userinfo

   nodeline_parse "whatever;xyz;;uuid-required;abc"

   [ "${_url}"     = "abc" ]          || fail "wrong name \"${_url}\""
   [ "${_address}" = "whatever" ]     || fail "wrong address \"${_address}\""
   [ -z "${_branch}"       ]          || fail "wrong branch \"${_branch}\""
   [ -z "${_tag}"          ]          || fail "wrong tag \"${_tag}\""
   [ "${_nodetype}" = "xyz"  ]        || fail "wrong nodetype \"${_nodetype}\""
   [ -z "${_marks}"        ]          || fail "wrong marks \"${_marks}\""
   [ -z "${_fetchoptions}" ]          || fail "wrong nodetype \"${_fetchoptions}\""
   [ -z "${_userinfo}"     ]          || fail "wrong userinfo \"${_userinfo}\""
   [ "${_uuid}" = "uuid-required" ]   || fail "wrong uuid \"${_uuid}\""
}



main()
{
   MULLE_SOURCETREE_FLAGS="$@"

   _options_mini_main "$@"

   set -e # for tests

   run_test_1
   log_verbose "----- #1 PASSED -----"

   run_test_2
   log_verbose "----- #2 PASSED -----"

   log_info "----- ALL PASSED -----"
}


init()
{
   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir`" || exit 1

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

   MULLE_SOURCETREE="${MULLE_SOURCETREE:-${PWD}/../../mulle-sourcetree}"
   MULLE_SOURCETREE_LIBEXEC_DIR="`${MULLE_SOURCETREE} library-path`" || exit 1

   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-node.sh" || exit 1
   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-nodeline.sh" || exit 1
}


init "$@"
main "$@"

