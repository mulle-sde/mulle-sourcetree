#! /bin/sh

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###


expect()
{
   local output="$1"
   local expected="$2"

   if [ "${output}" != "${expected}" ]
   then
      _internal_fail "Did expect \"${expected}\" but got \"${output}\""
   fi
}


main()
{
   MULLE_SOURCETREE_FLAGS="$@"  # unused

   _options_mini_main "$@" && set -x

   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-node.sh"      || exit 1
   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-nodeline.sh"  || exit 1
   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-db.sh"        || exit 1

   set -e

   r_make_tmp_directory || exit 1
   directory="${RVAL}"
   cd "${directory}"
   r_physicalpath "${directory}"
   MULLE_VIRTUAL_ROOT="${RVAL}"

   SOURCETREE_DB_FILENAME="db"
   SOURCETREE_DB_FILENAME_RELATIVE=".."

   local nodeline
   local sourcenodeline

   # just store some cruft in nodeline, easier for testing
   sourcetree::db::memorize "/" \
                            1 \
                            "text" \
                            "" \
                            "/filename" \
                            "" \
                            0

   nodeline="`sourcetree::db::fetch_nodeline_for_uuid "/" 1`"
   expect "${nodeline}" "text"
   nodeline="`sourcetree::db::fetch_filename_for_uuid "/" 1`"
   expect "${nodeline}" "/filename"
   log_verbose "----- #1 PASSED -----"

   sourcetree::db::memorize "/" \
                            2 \
                            "other" \
                            "owner" \
                            "/owner/other" \
                            "" \
                            1

   local filenames

   nodeline="`sourcetree::db::fetch_nodeline_for_uuid "/" 1`"
   expect "${nodeline}" "text"
   nodeline="`sourcetree::db::fetch_nodeline_for_uuid "/" 2`"
   expect "${nodeline}" "other"
   nodeline="`sourcetree::db::fetch_filename_for_uuid "/" 2`"
   expect "${nodeline}" "/owner/other"
   log_verbose "----- #2 PASSED -----"

   if sourcetree::db::fetch_nodeline_for_uuid "/" 3
   then
      _internal_fail "did find something unexpectedly"
   fi

   log_verbose "----- #3 PASSED -----"

   #
   # forget one
   #
   if ! sourcetree::db::forget "/" 2
   then
      _internal_fail "could not forget 2"
   fi

   if sourcetree::db::fetch_nodeline_for_uuid "/" 2
   then
      _internal_fail "did not forget"
   fi

   log_verbose "----- #4 PASSED -----"


   #
   # for zombiefication we need a proper nodeline
   # with a _nodetype
   if ! sourcetree::db::forget "/" 1
   then
      _internal_fail "did not forget"
   fi

   sourcetree::db::memorize "/" \
                            1 \
                            "_address;git;;1" \
                            "the_owner" \
                            "${PWD}/the_owner/_address" \
                            "" \
                            2

   mkdir -p the_owner/_address

   #
   # zombify but keeping it alive
   #
   if ! sourcetree::db::zombify_nodes "/"
   then
      _internal_fail "internal_failed to zombify"
   fi

   if ! sourcetree::db::fetch_nodeline_for_uuid "/" 1 > /dev/null
   then
      _internal_fail "zombie doesn't respond anymore"
   fi

   sourcetree::db::set_uuid_alive "/" 1

   if ! sourcetree::db::bury_zombies "/"
   then
      _internal_fail "internal_failed to bury"
   fi

   if ! sourcetree::db::fetch_nodeline_for_uuid "/" 1 > /dev/null
   then
      _internal_fail "alive node unfairly reaped before its time"
   fi

   [ -d "the_owner/_address" ] || _internal_fail  "directory vanished"

   log_verbose "----- #5 PASSED -----"

   #
   # zombify and bury
   #
   if ! sourcetree::db::zombify_nodes "/"
   then
      _internal_fail "internal_failed to zombify"
   fi

   if ! sourcetree::db::fetch_nodeline_for_uuid "/" 1 > /dev/null
   then
      _internal_fail "zombie doesn't respond anymore"
   fi

   if ! sourcetree::db::bury_zombies "/"
   then
      _internal_fail "internal_failed to bury"
   fi

   if sourcetree::db::fetch_nodeline_for_uuid "/" 1
   then
      _internal_fail "survived the zombie apocalypse"
   fi

   [ ! -d "the_owner/_address" ] || _internal_fail  "directory still there"

   log_verbose "----- #6 PASSED -----"

   log_info "----- ALL PASSED -----"
   cd ..
   rmdir_safer "${directory}"
}


init()
{
   MULLE_SOURCETREE="${MULLE_SOURCETREE:-${PWD}/../../mulle-sourcetree}"
   MULLE_SOURCETREE_LIBEXEC_DIR="`${MULLE_SOURCETREE} library-path`" || exit 1
}


init "$@"
main "$@"

