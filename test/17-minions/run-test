#! /bin/sh

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###


run_mulle_sourcetree()
{
   log_fluff "####################################" >&2
   log_fluff ${MULLE_SOURCETREE} ${MULLE_SOURCETREE_FLAGS:-} "$@"
   log_fluff "####################################" >&2

   (
      set +e
      
      MULLE_SOURCETREE_LIBEXEC_DIR="`${MULLE_SOURCETREE} libexec-dir`"

      . "${MULLE_SOURCETREE}" ${MULLE_SOURCETREE_FLAGS:-} "$@"
   )
}

_setup_demo_repo_a()
{
   local reporoot="$1"

   exekutor git init

   redirect_exekutor VERSION echo "1.0.0"
   run_mulle_sourcetree add --nodetype git "file://${reporoot}/b"
   exekutor git add VERSION .mulle
   exekutor git commit -m "a: initial version"
}


_setup_demo_repo_b()
{
   local reporoot="$1"

   exekutor git init

   redirect_exekutor VERSION echo "1.1.0"
   exekutor git add VERSION
   exekutor git commit -m "b: initial version"
}


setup_demo_repos()
{
   (
      set -e
      mkdir_if_missing "$1/a" &&
      exekutor cd "$1/a" && _setup_demo_repo_a "$1"
      mkdir_if_missing "$1/b" &&
      exekutor cd "$1/b" && _setup_demo_repo_b "$1"
      set +e
   ) || exit 1
}


run_test()
{
   r_physicalpath "${directory}/project"
   MULLE_VIRTUAL_ROOT="${RVAL}"
   export MULLE_VIRTUAL_ROOT

   exekutor mkdir b
   exekutor touch b/DONTDELETEME

   # lets make b a minion, it should not be clobbered by a
   if ! run_mulle_sourcetree add --nodetype git --marks no-share "file://${repos}/a"
   then
      _internal_fail "#1 add internal_failed unexpectedly"
   fi

   # node is expected to be local and no-delete
   if ! run_mulle_sourcetree add --marks "no-delete,no-update,no-share" b
   then
      _internal_fail "#1 add failed unexpectedly"
   fi

   if [ "`mulle-sourcetree get b nodetype`" != "local" ]
   then
      _internal_fail "#1 minion b is not local"
   fi

   if [ "`mulle-sourcetree get b marks`" != "no-delete,no-share,no-update" ]
   then
      _internal_fail "#1 minion b is not no-delete"
   fi

   run_mulle_sourcetree list -r -l
   run_mulle_sourcetree status

   log_verbose "----- #1 PASSED -----"

   #
   # this should not work, because project is not reachable from the
   # false MULLE_VIRTUAL_ROOT (directory)
   #
   r_physicalpath "${directory}"
   MULLE_VIRTUAL_ROOT="${RVAL}"

   if run_mulle_sourcetree ${UPDATE_FLAGS} --share update --no-lenient
   then
      _internal_fail "#2 update succeeded unexpectedly"
   fi

   run_mulle_sourcetree list -r -l
   run_mulle_sourcetree status

   log_verbose "----- #2 PASSED -----"

   #
   # now with the proper root though
   #
   r_physicalpath "${directory}/project"
   MULLE_VIRTUAL_ROOT="${RVAL}"

   if ! run_mulle_sourcetree ${UPDATE_FLAGS} --share update --no-lenient
   then
      _internal_fail "#3 update failed unexpectedly"
   fi

   [ -d "a" ]              || _internal_fail "#3 a should exist"
   [ -f "b/DONTDELETEME" ] || _internal_fail "#3 b/DONTDELETEME should exist"

   run_mulle_sourcetree list -r -l
   run_mulle_sourcetree status

   log_verbose "----- #3 PASSED -----"

   #
   # minion should not be removed, but a
   #
   if ! run_mulle_sourcetree clean
   then
      _internal_fail "#4 clean failed unexpectedly"
   fi

   [ -d "a" ]              && _internal_fail "#4 a should not exist"
   [ -f "b/DONTDELETEME" ] || _internal_fail "#4 b/DONTDELETEME should exist"

   run_mulle_sourcetree list -r -l
   run_mulle_sourcetree status

   log_verbose "----- #4 PASSED -----"

   r_physicalpath "${directory}/project"
   MULLE_VIRTUAL_ROOT="${RVAL}"

   #
   # should also work, will defer to root
   #
   cd "${directory}/project/b"

   if ! run_mulle_sourcetree ${UPDATE_FLAGS} --share update --no-lenient
   then
      _internal_fail "#5 update failed unexpectedly"
   fi

   run_mulle_sourcetree list -r -l
   run_mulle_sourcetree status

   log_verbose "----- #5 PASSED -----"
}


main()
{
   MULLE_SOURCETREE_FLAGS="$@"

   _options_mini_main "$@" && set -x

   local directory

   r_make_tmp_directory || exit 1
   directory="${RVAL}"
   local project

   project="${directory}/project"
   repos="${directory}/repositories"

   setup_demo_repos "${repos}"

   (
      rmdir_safer "${project}" &&
      mkdir_if_missing "${project}" &&
      cd "${project}" &&

      run_test
   ) || exit 1

   rmdir_safer "${directory}"
}


init()
{
   MULLE_SOURCETREE="${MULLE_SOURCETREE:-${PWD}/../../mulle-sourcetree}"
   MULLE_SOURCETREE_LIBEXEC_DIR="`${MULLE_SOURCETREE} library-path`" || exit 1

   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-node.sh" || exit 1
   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-nodeline.sh" || exit 1
   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-db.sh" || exit 1
   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-callback.sh" || exit 1
   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-sync.sh" || exit 1
}


init "$@"
main "$@"

