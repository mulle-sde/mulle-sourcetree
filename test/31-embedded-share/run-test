#! /bin/sh

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###


run_mulle_sourcetree()
{
   log_fluff "####################################" >&2
   log_fluff ${MULLE_SOURCETREE} ${MULLE_SOURCETREE_FLAGS:-} "$@"
   log_fluff "####################################" >&2

   (
      set +e
      
      MULLE_SOURCETREE_LIBEXEC_DIR="`${MULLE_SOURCETREE} libexec-dir`"

      . "${MULLE_SOURCETREE}" ${MULLE_SOURCETREE_FLAGS:-} "$@"
   )
}


#
# repo a has repo b embedded
#
# repo c depends on and b
#
# normally this would mean c fetches a copy of b for itself as embedded are
# no-share. But if we make it embedded and share, then c should not fetch c
#
_setup_demo_repo_a()
{
   local reporoot="$1"

   exekutor git init --initial-branch=master

   redirect_exekutor VERSION echo "1.0.0"
   run_mulle_sourcetree add --address b \
                            --nodetype git \
                            --marks Embedded \
                            "file://${reporoot}/b"
   exekutor git add VERSION .mulle
   exekutor git commit -m "a: initial version"
}

_setup_demo_repo_b()
{
   local reporoot="$1"

   exekutor git init --initial-branch=master

   redirect_exekutor VERSION echo "1.0.0"
   exekutor git add VERSION
   exekutor git commit -m "b: initial version"
}


_setup_demo_repo_c()
{
   local reporoot="$1"

   exekutor git init --initial-branch=master

   redirect_exekutor VERSION echo "1.0.0"
   run_mulle_sourcetree add --nodetype git "file://${reporoot}/b"
   exekutor git add VERSION .mulle
   exekutor git commit -m "c: initial version"
}


setup_demo_repos()
{
   (
      set -e
      mkdir_if_missing "$1/a" &&
      exekutor cd "$1/a" && _setup_demo_repo_a "$1"
      mkdir_if_missing "$1/b" &&
      exekutor cd "$1/b" && _setup_demo_repo_b "$1"
      mkdir_if_missing "$1/c" &&
      exekutor cd "$1/c" && _setup_demo_repo_c "$1"
      set +e
   ) || exit 1
}


dump()
{
   "${MULLE_SOURCETREE}" list -m
   tree ..
}


dump_n_fail()
{
   dump
   _internal_fail "$*"
}


setup_project()
{
   local repos="$1"

   if ! run_mulle_sourcetree add --nodetype git "file://${repos}/a"
   then
      dump_n_fail "add a failed unexpectedly"
   fi

   if ! run_mulle_sourcetree -s add --nodetype git "file://${repos}/c"
   then
      dump_n_fail "add c failed unexpectedly"
   fi
}


run_test_1()
{
   if ! MULLE_SOURCETREE_STASH_DIRNAME="shared" run_mulle_sourcetree --share update
   then
      dump_n_fail "# update failed unexpectedly"
   fi

   [ -d "shared/a" ]   || dump_n_fail "#1.1 shared/a   should exist"
   [ -d "shared/a/b" ] || dump_n_fail "#1.1 shared/a/b should exist"
   [ -d "shared/c" ]   || dump_n_fail "#1.1 shared/c   should exist"
   [ -d "shared/c/b" ] && dump_n_fail "#1.1 shared/c/b should not exist"

   dump

   if ! MULLE_SOURCETREE_STASH_DIRNAME="shared" run_mulle_sourcetree clean
   then
      _internal_fail "clean failed unexpectedly"
   fi

   [ -d "shared/a" ]   && dump_n_fail "#1.1 shared/a   should not exist"
   [ -d "shared/a/b" ] && dump_n_fail "#1.1 shared/a/b should not exist"
   [ -d "shared/c" ]   && dump_n_fail "#1.1 shared/c   should not exist"
   [ -d "shared/c/b" ] && dump_n_fail "#1.1 shared/c/b should not exist"

   return 0
}


run_test_2()
{
   if ! MULLE_SOURCETREE_STASH_DIRNAME="shared" run_mulle_sourcetree --share update
   then
      dump_n_fail "# update failed unexpectedly"
   fi

   [ -d "shared/a" ]   || dump_n_fail "#2.1 shared/a   should exist"
   [ -d "shared/a/b" ] || dump_n_fail "#2.1 shared/a/b should exist"
   [ -d "shared/b" ]   && dump_n_fail "#2.1 shared/b   should not exist"
   [ -d "shared/c" ]   || dump_n_fail "#2.1 shared/c   should exist"
   [ -d "shared/c/b" ] && dump_n_fail "#2.1 shared/c/b should not exist"

   dump

   if ! MULLE_SOURCETREE_STASH_DIRNAME="shared" run_mulle_sourcetree clean
   then
      _internal_fail "clean failed unexpectedly"
   fi

   [ -d "shared/a" ]   && dump_n_fail "#2.1 shared/a   should not exist"
   [ -d "shared/a/b" ] && dump_n_fail "#2.1 shared/a/b should not exist"
   [ -d "shared/c" ]   && dump_n_fail "#2.1 shared/c   should not exist"
   [ -d "shared/c/b" ] && dump_n_fail "#2.1 shared/c/b should not exist"

   return 0
}



change_demo_repo_a_set_b_to_share()
{
   (
      exekutor cd "$1/a" &&
      run_mulle_sourcetree mark -e "b" "no-share-shirk" &&
      exekutor git commit -m "a: share version" .mulle
   )
}



main()
{
   MULLE_SOURCETREE_FLAGS="$@"

   _options_mini_main "$@" && set -x

   local directory

   r_make_tmp_directory || exit 1
   directory="${RVAL}"

   local project
   local repos

   project="${directory}/project"
   repos="${directory}/repositories"

   mkdir_if_missing "${project}"

   setup_demo_repos "${repos}"

#
# a -> b (embedded)
# c -> b
# therefore a b c in shared and also b in a
#
# ..
# ├── project
# │   └── shared
# │       ├── a
# │       │   ├── b
# │       │   │   └── VERSION
# │       │   └── VERSION
# │       ├── b
# │       │   └── VERSION
# │       └── c
# │           └── VERSION
# └── repositories
#     ├── a
#     │   └── VERSION
#     ├── b
#     │   └── VERSION
#     └── c
#         └── VERSION

#   (
#      rmdir_safer "${project}" &&
#      mkdir_if_missing "${project}" &&
#      cd "${project}" &&
#      setup_project "${repos}" &&
#      run_test_1
#   ) || exit 1
#   log_verbose "----- #1 PASSED -----"


   change_demo_repo_a_set_b_to_share "${repos}" || dump_n_fail "could not set b to no-share for c"

   (
      rmdir_safer "${project}" &&
      mkdir_if_missing "${project}" &&
      cd "${project}" &&
      setup_project "${repos}" &&
      run_test_2
   ) || exit 1
   log_verbose "----- #2 PASSED -----"

   log_info "----- ALL PASSED -----"

   rmdir_safer "${directory}"
}


init()
{
   MULLE_SOURCETREE="${MULLE_SOURCETREE:-${PWD}/../../mulle-sourcetree}"
   MULLE_SOURCETREE_LIBEXEC_DIR="`${MULLE_SOURCETREE} library-path`" || exit 1

   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-node.sh"     || exit 1
   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-nodeline.sh" || exit 1
   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-db.sh"       || exit 1
   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-callback.sh" || exit 1
   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-sync.sh"     || exit 1
}


init "$@"
main "$@"

