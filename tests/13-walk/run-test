#! /usr/bin/env bash

[ "${TRACE}" = "YES" ] && set -x


run_mulle_sourcetree()
{
   log_fluff "####################################"
   log_fluff ${MULLE_SOURCETREE} ${MULLE_SOURCETREE_FLAGS} "$@"
   log_fluff "####################################"

   exekutor ${MULLE_SOURCETREE} ${MULLE_SOURCETREE_FLAGS} "$@"
}

#
# repository has no .mulle-sourcetree in 1.0.0
# repository has a .mulle-sourcetree in 2.0.0
# repository has no .mulle-sourcetree in 3.0.0
#

# a->b(->c)
# a->c

_setup_demo_repo_a()
{
   local reporoot="$1"

   exekutor git init

   redirect_exekutor VERSION echo "1.0.0"
   run_mulle_sourcetree -e add --nodetype git "file:///${reporoot}/b"
   run_mulle_sourcetree -e mark b "no-build"
   run_mulle_sourcetree -e add --nodetype git "file:///${reporoot}/c"
   exekutor git add VERSION .mulle-sourcetree
   exekutor git commit -m "a: initial version"
}

# b->c

_setup_demo_repo_b()
{
   local reporoot="$1"

   exekutor git init

   redirect_exekutor VERSION echo "1.1.0"
   run_mulle_sourcetree -e add --nodetype git "file:///${reporoot}/c"
   exekutor git add VERSION .mulle-sourcetree
   exekutor git commit -m "b: initial version"
}


_setup_demo_repo_c()
{
   local reporoot="$1"

   exekutor git init

   redirect_exekutor VERSION echo "1.0.0"
   exekutor git add VERSION
   exekutor git commit -m "c: initial version"
}


setup_demo_repos()
{
   (
      set -e
      mkdir_if_missing "$1/a" &&
      exekutor cd "$1/a" && _setup_demo_repo_a "$1"
      mkdir_if_missing "$1/b" &&
      exekutor cd "$1/b" && _setup_demo_repo_b "$1"
      mkdir_if_missing "$1/c" &&
      exekutor cd "$1/c" && _setup_demo_repo_c "$1"
      set +e
   ) || exit 1
}


run_test1()
{
   if ! run_mulle_sourcetree add --nodetype git "file://${repos}/a"
   then
      fail "add failed unexpectedly"
   fi

   if ! run_mulle_sourcetree --recurse update
   then
      fail "update failed unexpectedly"
   fi

   [ -d a ]     || fail "1.1.1"
   [ -d a/b ]   || fail "1.1.2"
   [ -d a/b/c ] || fail "1.1.3"
   [ -d a/c ]   || fail "1.1.4"

   [ ! -d b ]   || fail "1.1.5"
   [ ! -d c ]   || fail "1.1.6"

   local results
   local expected

   expected="a
a/b
a/b/c
a/c"

   results="`run_mulle_sourcetree walk --walk-db "echo" "\\\${MULLE_VIRTUAL_ADDRESS}"`"
   if [ $? -ne 0 ]
   then
      fail "db walk #1 failed unexpectedly"
   fi

   #
   # order is random pretty much due to uuids
   #
   results="$(sort <<< "${results}")"
   if [ "${results}" != "${expected}" ]
   then
      fail "db walk #1 returned \"${results}\". Expected was \"${expected}\""
   fi
   log_verbose "----- #1 PASSED -----"

   results="`run_mulle_sourcetree walk --in-order \
                                       --walk-config \
                                       "echo" "\\\${MULLE_VIRTUAL_ADDRESS}"`"
   if [ $? -ne 0 ]
   then
      fail "config walk #2 failed unexpectedly"
   fi

   #
   # depth first is consistent
   #
   expected="a/b/c
a/b
a/c
a"

   if [ "${results}" != "${expected}" ]
   then
      fail "config walk #2 returned \"${results}\". Expected was \"${expected}\""
   fi
   log_verbose "----- #2 PASSED -----"

   #
   # example how to get the repositories in build order
   #
   results="`run_mulle_sourcetree walk --pre-order \
                                       --marks build \
                                       --walk-config \
                                       "echo" \
                                       "\\\${MULLE_VIRTUAL_ADDRESS}"`"
   if [ $? -ne 0 ]
   then
      fail "config walk #3 failed unexpectedly"
   fi

   # b is marked no-build!
   expected="a
a/c"

   if [ "${results}" != "${expected}" ]
   then
      fail "config walk #3 returned \"${results}\". Expected was \"${expected}\""
   fi
   log_verbose "----- #3 PASSED -----"


   #
   # Finally do a shared walk
   #
   expected="a
b
c"

   results="`run_mulle_sourcetree --share walk "echo" "\\\${MULLE_VIRTUAL_ADDRESS}"`"
   if [ $? -ne 0 ]
   then
      fail "config walk #3 failed unexpectedly"
   fi

   log_verbose "----- #4 PASSED -----"

}



main()
{
   MULLE_SOURCETREE_FLAGS="$@"

   _options_mini_main "$@"

   local directory

   directory="`make_tmp_directory`" || exit 1

   local project

   project="${directory}/project"
   repos="${directory}/repositories"

   mkdir_if_missing "${project}"

   MULLE_VIRTUAL_ROOT="`physicalpath "${project}"`"
   export MULLE_VIRTUAL_ROOT

   setup_demo_repos "${repos}" || exit 1

   (
      rmdir_safer "${project}" &&
      mkdir_if_missing "${project}" &&
      cd "${project}" &&
      run_test1
   ) || exit 1

   log_info "----- ALL PASSED -----"

   rmdir_safer "${directory}"
}


init()
{
   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env library-path`" || exit 1

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

   MULLE_SOURCETREE="${MULLE_SOURCETREE:-${PWD}/../../mulle-sourcetree}"
   MULLE_SOURCETREE_LIBEXEC_DIR="`${MULLE_SOURCETREE} library-path`" || exit 1

   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-node.sh" || exit 1
   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-nodeline.sh" || exit 1
   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-db.sh" || exit 1
   . "${MULLE_SOURCETREE_LIBEXEC_DIR}/mulle-sourcetree-walk.sh" || exit 1
}


init "$@"
main "$@"

